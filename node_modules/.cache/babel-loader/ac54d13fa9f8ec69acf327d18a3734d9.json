{"ast":null,"code":"export function iterateObserversSafely(observers, method, argument) {\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/observables/iteration.ts"],"names":[],"mappings":"AAEA,OAAM,SAAU,sBAAsB,CACpC,SAA2B,EAC3B,MAAyB,EACzB,QAAY,EAAA;EAKZ,IAAM,mBAAmB,GAAkB,EAAE;EAC7C,SAAS,CAAC,OAAO,CAAC,UAAA,GAAG,EAAA;IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC;EAA5C,CAA4C,CAAC;EACtE,mBAAmB,CAAC,OAAO,CAAC,UAAA,GAAG,EAAA;IAAI,OAAC,GAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;EAA9B,CAA8B,CAAC;AACpE","sourcesContent":["import { Observer } from \"./Observable\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A,\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach(obs => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach(obs => (obs as any)[method](argument));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}