{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    preferredFetch = linkOptions.fetch,\n    _b = linkOptions.print,\n    print = _b === void 0 ? defaultPrinter : _b,\n    includeExtensions = linkOptions.includeExtensions,\n    preserveHeaderCase = linkOptions.preserveHeaderCase,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _c = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _c === void 0 ? false : _c,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers = options.headers || {};\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observer);\n        } else {\n          return readJsonBody(response, operation, observer);\n        }\n      }).catch(function (err) {\n        return handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["../../../src/link/http/createHttpLink.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable, hasDirectives } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport {\n  handleError,\n  readMultipartBody,\n  readJsonBody\n} from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    // does not match custom directives beginning with @defer\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers = options.headers || {};\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get('content-type');\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observer);\n          } else {\n            return readJsonBody(response, operation, observer);\n          }\n        })\n        .catch(err => handleError(err, observer));\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}