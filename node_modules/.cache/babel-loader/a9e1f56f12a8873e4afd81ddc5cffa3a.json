{"ast":null,"code":"import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"sources":["../../../src/link/http/responseIterator.ts"],"names":[],"mappings":"AAMA,SACE,uBAAuB,EACvB,MAAM,EACN,cAAc,EACd,oBAAoB,EACpB,gBAAgB,EAChB,gBAAgB,QACX,4CAA0C;AAEjD,OAAO,aAAa,MAAM,sBAAoB;AAC9C,OAAO,kBAAkB,MAAM,2BAAyB;AACxD,OAAO,eAAe,MAAM,wBAAsB;AAClD,OAAO,cAAc,MAAM,uBAAqB;AAEhD,OAAM,SAAU,gBAAgB,CAC9B,QAAiC,EAAA;EAEjC,IAAI,IAAI,GAAY,QAAQ;EAE5B,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,IAAI,GAAG,QAAQ,CAAC,IAAI;EAElD,IAAI,uBAAuB,CAAC,IAAI,CAAC,EAAE,OAAO,aAAa,CAAI,IAAI,CAAC;EAEhE,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE,OAAO,cAAc,CAAI,IAAI,CAAC,SAAS,EAAE,CAAC;EAItE,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;IAC1B,OAAO,cAAc,CAClB,IAAI,CAAC,MAAM,EAAmC,CAAC,SAAS,EAAE,CAC5D;EACF;EAED,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,eAAe,CAAI,IAAI,CAAC,WAAW,EAAE,CAAC;EAE/D,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE,OAAO,kBAAkB,CAAI,IAAI,CAAC;EAElE,MAAM,IAAI,KAAK,CACb,4EAA4E,CAC7E;AACH","sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport { Response as NodeResponse } from \"node-fetch\";\nimport {\n  isAsyncIterableIterator,\n  isBlob,\n  isNodeResponse,\n  isNodeReadableStream,\n  isReadableStream,\n  isStreamableBlob,\n} from \"../../utilities/common/responseIterator\";\n\nimport asyncIterator from \"./iterators/async\";\nimport nodeStreamIterator from \"./iterators/nodeStream\";\nimport promiseIterator from \"./iterators/promise\";\nimport readerIterator from \"./iterators/reader\";\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}