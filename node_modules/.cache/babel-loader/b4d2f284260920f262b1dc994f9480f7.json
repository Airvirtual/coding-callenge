{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 33);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue;\n    }\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 34);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") + \"subscriptions and \".concat(mutations.length, \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 35);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") + \"\".concat(definitions.length, \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 36);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") + \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 37);\n}","map":{"version":3,"sources":["../../../src/react/parser/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}