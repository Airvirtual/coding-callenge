{"ast":null,"code":"import { __extends } from \"tslib\";\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n  setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n  } : _a;\nvar InvariantError = /** @class */function (_super) {\n  __extends(InvariantError, _super);\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n  return InvariantError;\n}(Error);\nexport { InvariantError };\nexport function invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\nvar verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\nfunction wrapConsoleMethod(name) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      var method = console[name] || console.log;\n      return method.apply(console, arguments);\n    }\n  };\n}\n(function (invariant) {\n  invariant.debug = wrapConsoleMethod(\"debug\");\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\nexport function setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\nexport default invariant;","map":{"version":3,"sources":["../src/invariant.ts"],"names":[],"mappings":";AAAA,IAAM,cAAc,GAAG,qBAAqB;AAE1C,IAAA,EAAA,GAIE,MAAa,CAAA,cADd;EAHD,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAU,GAAQ,EAAE,KAAU,EAAA;IAC7C,GAAG,CAAC,SAAS,GAAG,KAAK;IACrB,OAAO,GAAG;EACZ,CAAC,GAAA,EAAA;AAGH,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAGlC,SAAA,cAAA,CAAY,OAAyC,EAAA;IAAzC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,cAAyC;IAAA;IAArD,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,OAAO,OAAO,KAAK,QAAQ,GACpB,cAAc,GAAA,IAAA,GAAK,OAAO,GAAA,4DAA4D,GACzF,OAAO,CACZ,IAAA,IAAA;IAPH,KAAA,CAAA,WAAW,GAAG,CAAC;IACf,KAAA,CAAA,IAAI,GAAG,cAAc;IAOnB,cAAc,CAAC,KAAI,EAAE,cAAc,CAAC,SAAS,CAAC;;EAChD;EACF,OAAA,cAAC;AAAD,CAAC,CAXmC,KAAK,CAAA;;AAazC,OAAM,SAAU,SAAS,CACvB,SAAc,EACd,OAAyB,EAAA;EAEzB,IAAI,CAAC,SAAS,EAAE;IACd,MAAM,IAAI,cAAc,CAAC,OAAO,CAAC;EAClC;AACH;AAEA,IAAM,eAAe,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAU;AAG5E,IAAI,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC;AAEnD,SAAS,iBAAiB,CAA8B,IAAO,EAAA;EAC7D,OAAO,YAAA;IACL,IAAI,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,cAAc,EAAE;MACnD;MACA;MACA,IAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,GAAG;MAC3C,OAAO,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,SAAgB,CAAC;IAC/C;EACH,CAAwB;AAC1B;AAEA,CAAA,UAAiB,SAAS,EAAA;EACX,SAAA,CAAA,KAAK,GAAG,iBAAiB,CAAC,OAAO,CAAC;EAClC,SAAA,CAAA,GAAG,GAAG,iBAAiB,CAAC,KAAK,CAAC;EAC9B,SAAA,CAAA,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC;EAChC,SAAA,CAAA,KAAK,GAAG,iBAAiB,CAAC,OAAO,CAAC;AACjD,CAAC,EALgB,SAAS,KAAT,SAAS,GAAA,CAAA,CAAA,CAAA,CAAA;AAO1B,OAAM,SAAU,YAAY,CAAC,KAAqB,EAAA;EAChD,IAAM,GAAG,GAAG,eAAe,CAAC,cAAc,CAAC;EAC3C,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;EAC5D,OAAO,GAAG;AACZ;AAEA,eAAe,SAAS","sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"debug\", \"log\", \"warn\", \"error\", \"silent\"] as const;\nexport type VerbosityLevel = (typeof verbosityLevels)[number];\nexport type ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(name: M) {\n  return function () {\n    if (verbosityLevels.indexOf(name) >= verbosityLevel) {\n      // Default to console.log if this host environment happens not to provide\n      // all the console.* methods we need.\n      const method = console[name] || console.log;\n      return method.apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const debug = wrapConsoleMethod(\"debug\");\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\nexport default invariant;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}