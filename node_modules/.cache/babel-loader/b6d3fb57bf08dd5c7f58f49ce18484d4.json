{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n    return this;\n  };\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  };\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var options = this.getDiffOptions(variables);\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n    this.updateWatch(this.variables = variables);\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n    if (oq === this.observableQuery) return;\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n    this.observableQuery = oq;\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        var diff = _this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n    cancelNotifyTimeout(this);\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n    this.dirty = false;\n  };\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n    return true;\n  };\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n  QueryInfo.prototype.cancel = function () {};\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n  QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n    var _this = this;\n    var merger = new DeepMerger();\n    var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n    this.reset();\n    if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n      var mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n    } else if ('hasNext' in result && result.hasNext) {\n      var diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data);\n    }\n    this.graphQLErrors = graphQLErrors;\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n          var diffOptions = _this.getDiffOptions(options.variables);\n          var diff = cache.diff(diffOptions);\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n          _this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n    return error;\n  };\n  return QueryInfo;\n}();\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}","map":{"version":3,"sources":["../../src/core/QueryInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode, GraphQLError } from 'graphql';\nimport { equal } from \"@wry/equality\";\n\nimport { Cache, ApolloCache } from '../cache';\nimport { DeepMerger } from \"../utilities\"\nimport { mergeIncrementalData } from '../utilities/common/incrementalResult';\nimport { WatchQueryOptions, ErrorPolicy } from './watchQueryOptions';\nimport { ObservableQuery, reobserveCacheFirst } from './ObservableQuery';\nimport { QueryListener } from './types';\nimport { FetchResult } from '../link/core';\nimport {\n  ObservableSubscription,\n  isNonEmptyArray,\n  graphQLResultHasError,\n  canUseWeakMap,\n} from '../utilities';\nimport {\n  NetworkStatus,\n  isNetworkRequestInFlight,\n} from './networkStatus';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\n\nexport type QueryStoreValue = Pick<QueryInfo,\n  | \"variables\"\n  | \"networkStatus\"\n  | \"networkError\"\n  | \"graphQLErrors\"\n  >;\n\nexport const enum CacheWriteBehavior {\n  FORBID,\n  OVERWRITE,\n  MERGE,\n};\n\nconst destructiveMethodCounts = new (\n  canUseWeakMap ? WeakMap : Map\n)<ApolloCache<any>, number>();\n\nfunction wrapDestructiveCacheMethod(\n  cache: ApolloCache<any>,\n  methodName: keyof ApolloCache<any>,\n) {\n  const original = cache[methodName];\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(\n        cache,\n        // The %1e15 allows the count to wrap around to 0 safely every\n        // quadrillion evictions, so there's no risk of overflow. To be\n        // clear, this is more of a pedantic principle than something\n        // that matters in any conceivable practical scenario.\n        (destructiveMethodCounts.get(cache)! + 1) % 1e15,\n      );\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info: QueryInfo) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nexport class QueryInfo {\n  listeners = new Set<QueryListener>();\n  document: DocumentNode | null = null;\n  lastRequestId = 1;\n  subscriptions = new Set<ObservableSubscription>();\n  variables?: Record<string, any>;\n  networkStatus?: NetworkStatus;\n  networkError?: Error | null;\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  stopped = false;\n\n  private cache: ApolloCache<any>;\n\n  constructor(\n    queryManager: QueryManager<any>,\n    public readonly queryId = queryManager.generateQueryId(),\n  ) {\n    const cache = this.cache = queryManager.cache;\n\n    // Track how often cache.evict is called, since we want eviction to\n    // override the feud-stopping logic in the markResult method, by\n    // causing shouldWrite to return true. Wrapping the cache.evict method\n    // is a bit of a hack, but it saves us from having to make eviction\n    // counting an official part of the ApolloCache API.\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  public init(query: {\n    document: DocumentNode;\n    variables: Record<string, any> | undefined,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus?: NetworkStatus,\n    observableQuery?: ObservableQuery<any>;\n    lastRequestId?: number;\n  }): this {\n    let networkStatus = query.networkStatus || NetworkStatus.loading;\n    if (this.variables &&\n        this.networkStatus !== NetworkStatus.loading &&\n        !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus,\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  reset() {\n    cancelNotifyTimeout(this);\n    this.dirty = false;\n  }\n\n  getDiff(variables = this.variables): Cache.DiffResult<any> {\n    const options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return { complete: false };\n    }\n\n    const diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  }\n\n  private lastDiff?: {\n    diff: Cache.DiffResult<any>,\n    options: Cache.DiffOptions,\n  };\n\n  private updateLastDiff(\n    diff: Cache.DiffResult<any> | null,\n    options?: Cache.DiffOptions,\n  ) {\n    this.lastDiff = diff ? {\n      diff,\n      options: options || this.getDiffOptions(),\n    } : void 0;\n  }\n\n  private getDiffOptions(variables = this.variables): Cache.DiffOptions {\n    return {\n      query: this.document!,\n      variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: this.observableQuery?.options.canonizeResults,\n    };\n  }\n\n  setDiff(diff: Cache.DiffResult<any> | null) {\n    const oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n    if (!this.dirty &&\n        !equal(oldDiff && oldDiff.result,\n               diff && diff.result)) {\n      this.dirty = true;\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(() => this.notify(), 0);\n      }\n    }\n  }\n\n  public readonly observableQuery: ObservableQuery<any> | null = null;\n  private oqListener?: QueryListener;\n\n  setObservableQuery(oq: ObservableQuery<any> | null) {\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    (this as any).observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = () => {\n        const diff = this.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          oq[\"observe\"]();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  }\n\n  notify() {\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(listener => listener(this));\n    }\n\n    this.dirty = false;\n  }\n\n  private shouldNotify() {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) &&\n        this.observableQuery) {\n      const { fetchPolicy } = this.observableQuery.options;\n      if (fetchPolicy !== \"cache-only\" &&\n          fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public stop() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      // Cancel the pending notify timeout\n      this.reset();\n\n      this.cancel();\n      // Revert back to the no-op version of cancel inherited from\n      // QueryInfo.prototype.\n      this.cancel = QueryInfo.prototype.cancel;\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      const oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  }\n\n  // This method is a no-op by default, until/unless overridden by the\n  // updateWatch method.\n  private cancel() {}\n\n  private lastWatch?: Cache.WatchOptions;\n\n  private updateWatch(variables = this.variables) {\n    const oq = this.observableQuery;\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    const watchOptions: Cache.WatchOptions = {\n      // Although this.getDiffOptions returns Cache.DiffOptions instead of\n      // Cache.WatchOptions, all the overlapping options should be the same, so\n      // we can reuse getDiffOptions here, for consistency.\n      ...this.getDiffOptions(variables),\n      watcher: this,\n      callback: diff => this.setDiff(diff),\n    };\n\n    if (!this.lastWatch ||\n        !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  }\n\n  private lastWrite?: {\n    result: FetchResult<any>;\n    variables: WatchQueryOptions[\"variables\"];\n    dmCount: number | undefined;\n  };\n\n  public resetLastWrite() {\n    this.lastWrite = void 0;\n  }\n\n  private shouldWrite(\n    result: FetchResult<any>,\n    variables: WatchQueryOptions[\"variables\"],\n  ) {\n    const { lastWrite } = this;\n    return !(\n      lastWrite &&\n      // If cache.evict has been called since the last time we wrote this\n      // data into the cache, there's a chance writing this result into\n      // the cache will repair what was evicted.\n      lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n      equal(variables, lastWrite.variables) &&\n      equal(result.data, lastWrite.result.data)\n    );\n  }\n\n  public markResult<T>(\n    result: FetchResult<T>,\n    document: DocumentNode,\n    options: Pick<WatchQueryOptions,\n      | \"variables\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n    cacheWriteBehavior: CacheWriteBehavior,\n  ) {\n    const merger = new DeepMerger();\n    const graphQLErrors = isNonEmptyArray(result.errors)\n      ? result.errors.slice(0)\n      : [];\n\n    // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n    // requests. To allow future notify timeouts, diff and dirty are reset as well.\n    this.reset();\n\n    if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n      const mergedData = mergeIncrementalData(this.getDiff().result, result);\n      result.data = mergedData;\n\n    // Detect the first chunk of a deferred query and merge it with existing\n    // cache data. This ensures a `cache-first` fetch policy that returns\n    // partial cache data or a `cache-and-network` fetch policy that already\n    // has full data in the cache does not complain when trying to merge the\n    // initial deferred server data with existing cache data.\n    } else if ('hasNext' in result && result.hasNext) {\n      const diff = this.getDiff();\n      result.data = merger.merge(diff.result, result.data)\n    }\n\n    this.graphQLErrors = graphQLErrors;\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff(\n        { result: result.data, complete: true },\n        this.getDiffOptions(options.variables),\n      );\n\n    } else if (cacheWriteBehavior !== CacheWriteBehavior.FORBID) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        // Using a transaction here so we have a chance to read the result\n        // back from the cache before the watch callback fires as a result\n        // of writeQuery, so we can store the new diff quietly and ignore\n        // it when we receive it redundantly from the watch callback.\n        this.cache.performTransaction(cache => {\n          if (this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: document,\n              data: result.data as T,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === CacheWriteBehavior.OVERWRITE,\n            });\n\n            this.lastWrite = {\n              result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(this.cache),\n            };\n          } else {\n            // If result is the same as the last result we received from\n            // the network (and the variables match too), avoid writing\n            // result into the cache again. The wisdom of skipping this\n            // cache write is far from obvious, since any cache write\n            // could be the one that puts the cache back into a desired\n            // state, fixing corruption or missing data. However, if we\n            // always write every network result into the cache, we enable\n            // feuds between queries competing to update the same data in\n            // incompatible ways, which can lead to an endless cycle of\n            // cache broadcasts and useless network requests. As with any\n            // feud, eventually one side must step back from the brink,\n            // letting the other side(s) have the last word(s). There may\n            // be other points where we could break this cycle, such as\n            // silencing the broadcast for cache.writeQuery (not a good\n            // idea, since it just delays the feud a bit) or somehow\n            // avoiding the network request that just happened (also bad,\n            // because the server could return useful new data). All\n            // options considered, skipping this cache write seems to be\n            // the least damaging place to break the cycle, because it\n            // reflects the intuition that we recently wrote this exact\n            // result into the cache, so the cache *should* already/still\n            // contain this data. If some other query has clobbered that\n            // data in the meantime, that's too bad, but there will be no\n            // winners if every query blindly reverts to its own version\n            // of the data. This approach also gives the network a chance\n            // to return new data, which will be written into the cache as\n            // usual, notifying only those queries that are directly\n            // affected by the cache updates, as usual. In the future, an\n            // even more sophisticated cache could perhaps prevent or\n            // mitigate the clobbering somehow, but that would make this\n            // particular cache write even less important, and thus\n            // skipping it would be even safer than it is today.\n            if (this.lastDiff &&\n                this.lastDiff.diff.complete) {\n              // Reuse data from the last good (complete) diff that we\n              // received, when possible.\n              result.data = this.lastDiff.diff.result;\n              return;\n            }\n            // If the previous this.diff was incomplete, fall through to\n            // re-reading the latest data with cache.diff, below.\n          }\n\n          const diffOptions = this.getDiffOptions(options.variables);\n          const diff = cache.diff<T>(diffOptions);\n\n          // In case the QueryManager stops this QueryInfo before its\n          // results are delivered, it's important to avoid restarting the\n          // cache watch when markResult is called.\n          if (!this.stopped) {\n            // Any time we're about to update this.diff, we need to make\n            // sure we've started watching the cache.\n            this.updateWatch(options.variables);\n          }\n\n          // If we're allowed to write to the cache, and we can read a\n          // complete result from the cache, update result.data to be the\n          // result from the cache, rather than the raw network result.\n          // Set without setDiff to avoid triggering a notify call, since\n          // we have other ways of notifying for this result.\n          this.updateLastDiff(diff, diffOptions);\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  }\n\n  public markReady() {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  }\n\n  public markError(error: ApolloError) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  }\n}\n\nexport function shouldWriteResult<T>(\n  result: FetchResult<T>,\n  errorPolicy: ErrorPolicy = \"none\",\n) {\n  const ignoreErrors =\n    errorPolicy === \"ignore\" ||\n    errorPolicy === \"all\";\n  let writeWithErrors = !graphQLResultHasError(result);\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n  return writeWithErrors;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}