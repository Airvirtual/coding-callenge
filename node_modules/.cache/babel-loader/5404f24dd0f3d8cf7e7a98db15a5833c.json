{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n      error = observer.error,\n      complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n    var promiseQueue = {\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n          var both = function () {\n            return examiner(arg);\n          };\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n            if (completed) {\n              handler.complete();\n            }\n          }, function (error) {\n            --activeCallbackCount;\n            throw error;\n          }).catch(function (caught) {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/observables/asyncMap.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAkB,iBAAe;AAIpD,OAAM,SAAU,QAAQ,CACtB,UAAyB,EACzB,KAAuC,EACvC,OAA4C,EAAA;EAE5C,OAAO,IAAI,UAAU,CAAI,UAAA,QAAQ,EAAA;IACvB,IAAA,IAAI,GAAsB,QAAQ,CAAA,IAA9B;MAAE,KAAK,GAAe,QAAQ,CAAA,KAAvB;MAAE,QAAQ,GAAK,QAAQ,CAAA,QAAb;IAC7B,IAAI,mBAAmB,GAAG,CAAC;IAC3B,IAAI,SAAS,GAAG,KAAK;IACrB,IAAI,YAAY,GAAG;MAIjB,IAAI,EAAA,SAAA,CAAC,QAAmB,EAAA;QACtB,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO,EAAA;UAAI,OAAA,OAAO,CAAC,QAAQ,EAAE,CAAC;QAAnB,CAAmB,CAAC;MACpD;KACgB;IAElB,SAAS,YAAY,CACnB,QAAuC,EACvC,QAAoC,EAAA;MAEpC,IAAI,QAAQ,EAAE;QACZ,OAAO,UAAA,GAAG,EAAA;UACR,EAAE,mBAAmB;UACrB,IAAM,IAAI,GAAG,SAAA,CAAA,EAAA;YAAM,OAAA,QAAQ,CAAC,GAAG,CAAC;UAAb,CAAa;UAChC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAC/C,UAAA,MAAM,EAAA;YACJ,EAAE,mBAAmB;YACrB,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;YACnC,IAAI,SAAS,EAAE;cACb,OAAO,CAAC,QAAS,EAAE;YACpB;UACH,CAAC,EACD,UAAA,KAAK,EAAA;YACH,EAAE,mBAAmB;YACrB,MAAM,KAAK;UACb,CAAC,CACF,CAAC,KAAK,CAAC,UAAA,MAAM,EAAA;YACZ,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;UACvC,CAAC,CAAC;QACJ,CAAC;OACF,MAAM;QACL,OAAO,UAAA,GAAG,EAAA;UAAI,OAAA,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;QAAxC,CAAwC;MACvD;IACH;IAEA,IAAM,OAAO,GAAgB;MAC3B,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC;MAC/B,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC;MACnC,QAAQ,EAAA,SAAA,CAAA,EAAA;QACN,SAAS,GAAG,IAAI;QAChB,IAAI,CAAC,mBAAmB,EAAE;UACxB,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QACpC;MACH;KACD;IAED,IAAM,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC;IACzC,OAAO,YAAA;MAAM,OAAA,GAAG,CAAC,WAAW,EAAE;IAAjB,CAAiB;EAChC,CAAC,CAAC;AACJ","sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}