{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult, isExecutionPatchResult } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n      link = _a.link,\n      defaultOptions = _a.defaultOptions,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      onBroadcast = _a.onBroadcast,\n      _c = _a.ssrMode,\n      ssrMode = _c === void 0 ? false : _c,\n      _d = _a.clientAwareness,\n      clientAwareness = _d === void 0 ? {} : _d,\n      localState = _a.localState,\n      assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(14));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueries = _a.updateQueries,\n      _d = _a.refetchQueries,\n      refetchQueries = _d === void 0 ? [] : _d,\n      _e = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _e === void 0 ? false : _e,\n      updateWithProxyFn = _a.update,\n      onQueryUpdated = _a.onQueryUpdated,\n      _f = _a.fetchPolicy,\n      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n      _g = _a.errorPolicy,\n      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n      keepRootFields = _a.keepRootFields,\n      context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 15);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 16);\n            mutationId = this.generateMutationId();\n            _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n            mutation = this.cache.transformForLink(document);\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _j.sent();\n            _j.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: 'ROOT_MUTATION',\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          query: this.transform(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== 'undefined') {\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: 'ROOT_MUTATION',\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          var update = mutation.update;\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if ('incremental' in result) {\n                  delete result.incremental;\n                }\n                if ('hasNext' in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var noConnection = removeConnectionDirectiveFromDocument(transformed);\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 17);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 18);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 19);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 20);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(21));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      errorPolicy = _a.errorPolicy,\n      variables = _a.variables,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n        return result;\n      });\n    };\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n    if (serverQuery) {\n      var _b = this,\n        inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n        link = _b.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    var clientQuery = this.transform(query).clientQuery;\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (normalized.fetchPolicy !== \"standby\" && concastSources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return concastSources;\n    };\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return concast;\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                result = oq.refetch();\n              }\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      if (errorPolicy === 'none' && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n          return [resultsFromLink()];\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n          return [resultsFromLink()];\n        }\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n        return [resultsFromLink()];\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n        return [resultsFromLink()];\n      case \"standby\":\n        return [];\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"sources":["../../src/core/QueryManager.ts"],"names":[],"mappings":";AAAA,SAAS,SAAS,EAAE,cAAc,QAAQ,+BAAuB;AAKjE,SAAS,KAAK,QAAQ,eAAe;AAErC,SAAqB,OAAO,QAAqB,uBAAe;AAChE,SACE,iCAAiC,EACjC,sBAAsB,QACjB,0CAAwC;AAC/C,SAA6B,kBAAkB,QAAQ,mBAAW;AAElE,SACE,gBAAgB,EAChB,sBAAsB,EACtB,gBAAgB,EAChB,gBAAgB,EAChB,qBAAqB,EACrB,0BAA0B,EAC1B,qCAAqC,EACrC,aAAa,EAEb,UAAU,EACV,QAAQ,EACR,eAAe,EACf,OAAO,EAEP,YAAY,EACZ,cAAc,EACd,eAAe,QACV,uBAAe;AACtB,SAAS,oBAAoB,QAAQ,0CAAwC;AAC7E,SAAS,WAAW,EAAE,aAAa,QAAQ,oBAAY;AASvD,SAAS,eAAe,EAAE,qBAAqB,QAAQ,sBAAoB;AAC3E,SAAS,aAAa,EAAE,wBAAwB,QAAQ,oBAAkB;AAW1E,SAAS,UAAU,QAAQ,iBAAe;AAE1C,SACE,SAAS,EAET,iBAAiB,QAEZ,gBAAc;AAEb,IAAA,cAAc,GAAK,MAAM,CAAC,SAAS,CAAA,cAArB;AAuBtB,IAAA,YAAA,GAAA,YAAA;EAyBE,SAAA,YAAA,CAAY,EAoBX,EAAA;QAnBC,KAAK,GAAA,EAAA,CAAA,KAAA;MACL,IAAI,GAAA,EAAA,CAAA,IAAA;MACJ,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,EAAA,GAAA,EAAA,CAAA,kBAA0B;MAA1B,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,GAAA,EAAA;MAC1B,WAAW,GAAA,EAAA,CAAA,WAAA;MACX,EAAA,GAAA,EAAA,CAAA,OAAe;MAAf,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,GAAA,EAAA;MACf,EAAA,GAAA,EAAA,CAAA,eAAoB;MAApB,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAA,CAAE,GAAA,EAAA;MACpB,UAAU,GAAA,EAAA,CAAA,UAAA;MACV,sBAAsB,GAAA,EAAA,CAAA,sBAAA;IAzBhB,IAAA,CAAA,eAAe,GAA2B,CAAA,CAAE;IAU5C,IAAA,CAAA,OAAO,GAAG,IAAI,GAAG,EAAqB;IAItC,IAAA,CAAA,cAAc,GAAG,IAAI,GAAG,EAA+B;IAgfvD,IAAA,CAAA,cAAc,GAAG,KACvB,aAAa,GAAG,OAAO,GAAG,GAAG,GACO;IAgI9B,IAAA,CAAA,cAAc,GAAG,CAAC;IAKlB,IAAA,CAAA,gBAAgB,GAAG,CAAC;IAKpB,IAAA,CAAA,iBAAiB,GAAG,CAAC;IA6PrB,IAAA,CAAA,uBAAuB,GAAG,IAAI,GAAG,EAGtC;IAr2BD,IAAI,CAAC,KAAK,GAAG,KAAK;IAClB,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAC3D,IAAI,CAAC,kBAAkB,GAAG,kBAAkB;IAC5C,IAAI,CAAC,eAAe,GAAG,eAAe;IACtC,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,UAAU,CAAC;MAAE,KAAK,EAAA;IAAA,CAAE,CAAC;IACzD,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC,sBAAsB;IACtD,IAAK,IAAI,CAAC,WAAW,GAAG,WAAW,EAAG;MACpC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IACzC;EACH;EAMO,YAAA,CAAA,SAAA,CAAA,IAAI,GAAX,YAAA;IAAA,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,OAAO,EAAA;MAClC,KAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI,CAAC,oBAAoB,CACvB,OAAI,GAAA,IAAA,cAAe,CAAA,gDACnB,CAAA,GAAA,IAAA,cAAA,CAAA,EAAA,CAAA,CAAA;EACJ,CAAC;EAEO,YAAA,CAAA,SAAA,CAAA,oBAAoB,GAA5B,UAA6B,KAAY,EAAA;IACvC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,MAAM,EAAA;MAAI,OAAA,MAAM,CAAC,KAAK,CAAC;IAAb,CAAa,CAAC;IACpD,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE;EAC7B,CAAC;EAEY,YAAA,CAAA,SAAA,CAAA,MAAM,GAAnB,UAKE,EAa6C,EAAA;;QAZ7C,QAAQ,GAAA,EAAA,CAAA,QAAA;MACR,SAAS,GAAA,EAAA,CAAA,SAAA;MACT,kBAAkB,GAAA,EAAA,CAAA,kBAAA;MAClB,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,EAAA,GAAA,EAAA,CAAA,cAAmB;MAAnB,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAA,EAAA;MACnB,EAAA,GAAA,EAAA,CAAA,mBAA2B;MAA3B,mBAAmB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAK,GAAA,EAAA;MACnB,iBAAiB,GAAA,EAAA,CAAA,MAAA;MACzB,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,EAAA,GAAA,EAAA,CAAA,WAAuE;MAAvE,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,cAAc,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,KAAI,cAAc,GAAA,EAAA;MACvE,EAAA,GAAA,EAAA,CAAA,WAA+D;MAA/D,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,cAAc,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAW,KAAI,MAAM,GAAA,EAAA;MAC/D,cAAc,GAAA,EAAA,CAAA,cAAA;MACd,OAAO,GAAA,EAAA,CAAA,OAAA;;;;;;YAEP,OAAA,GACE,SAAQ,CACR,QAAA,EAAA,6FACA,CAAA,GAAA,SAAA,CAAA,QAAA,EAAA,EAAA,CAAA;YAEF,OAAA,GACE,SAAA,CAAA,WAAgB,KAAA,cAAc,IAC9B,WAAW,KAAK,UAAU,EAC1B,4MAA4M,CAC7M,GAAC,SAAA,CAAA,WAAA,KAAA,cAAA,IAEI,WAAa,KAAK,UAAA,EAAA,EAAA,CAAA;YAElB,UAGG,GAAA,IAAA,CAFP,kBAAA,EAAA;YAGF,EAAA,GAAA,IAAQ,CAAA,SAAQ,CAAA,QAAM,CAAA,EAAA,QAAiB,GAAA,EAAA,CAAA,QAAU,EAAA,gBAAA,GAAA,EAAA,CAAA,gBAAA;YAEjD,QAAA,GAAS,IAAG,CAAI,KAAC,CAAA,gBAAqB,CAAA,QAAE,CAAA;YACpC,SAAA,GAAA,IAAA,CAAA,YAAA,CAAA,QAAgB,EAAA,SAAA,CAAA;YACN,IAAA,CAAA,gBAAW,EAAA,OAAW,CAAA,CAAA,EAAA,CAAA,CAAA;;UAAlC,KAAA,CAAA;;;UAGI,KAAA,CAAA;YAEJ,kBAAM,GAAA,IAAc,CAAA,aAAc,KAChC,IAAA,CAAA,aAAQ,CAAA,UAAA,CAAA,GAAA;cACR,QAAA,EAAS,QAAA;cACT,SAAS,EAAA,SAAI;cACb,OAAO,EAAA,IAAI;cACY,KAAA,EAAA;YAEvB,CAAA,CAAA;gBACF,kBAAK,EAAA;kBAMH,CAAA,sBAAU,CAAA,kBAAA,EAAA;gBACV,UAAU,EAAA,UAAQ;gBAClB,QAAA,EAAS,QAAA;gBACT,SAAA,EAAW,SAAA;gBACX,WAAW,EAAA,WAAA;gBACX,WAAO,EAAA,WAAA;gBACP,OAAA,EAAA,OAAa;gBACb,aAAQ,EAAA,aAAiB;gBACzB,MAAA,EAAA,iBAAc;gBACb,cAAA,EAAA;cACJ,CAAA,CAAA;YAED;YAEM,IAAI,CAAA,gBAAQ,EAAA;YAElB,IAAA,GAAA,IAAO;oBACL,CAAA,EAAA,IAAO,OAAA,CAAQ,UACR,OAAA,EAAA,MAAA,EAAqB;cAWxB,OAAA,QAAI,CAAA,IAAA,CAAA,qBAAiC,CAAA,QAAA,EAAW,QAAK,CAAA,QAAQ,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA;gBAAA,kBAAA,EAAA;cAAA,CAAA,CAAA,EAAA,SAAA,EAAA,KAAA,CAAA,EAAA,UAAA,MAAA,EAAA;oBAC3D,qBAAqB,CAAC,MAAA,CAAA,IAAA,WAAA,KAAA,MAAA,EAAA;kBACpB,MAAA,IAAA,WAAe,CAAA;oBACd,aAAA,EAAA,0BAAA,CAAA,MAAA;kBACJ,CAAA,CAAA;gBAED;oBACE,kBAAkB,EAAC;kBACnB,kBAAkB,CAAC,OAAK,GAAG,KAAK;kBACjC,kBAAA,CAAA,KAAA,GAAA,IAAA;gBAED;gBAEA,IAAI,WAAO,GAAA,QAAc,CAAA,CAAA,CAAA,EAAK,MAAA,CAAA;oBAC5B,OAAA,cAAiB,KAAA,UAAe,EAAA;kBACjC,cAAA,GAAA,cAAA,CAAA,WAAA,CAAA;gBAED;oBACI,WAAA,KAAA,QAAsB,IACxB,qBAAmB,CAAA,WAAO,CAAA,EAAA;kBAC3B,OAAA,WAAA,CAAA,MAAA;gBAED;gBAME,OAAA,IAAA,CAAA,kBAAU,CAAA;kBACV,UAAQ,EAAA,UAAW;kBACnB,MAAA,EAAQ,WAAU;kBAClB,QAAA,EAAS,QAAA;kBACT,SAAA,EAAW,SAAA;kBACX,WAAW,EAAA,WAAA;kBACX,WAAO,EAAA,WAAA;kBACP,OAAM,EAAE,OAAA;kBACR,MAAA,EAAA,iBAAa;kBACb,aAAA,EAAA,aAAmB;kBACnB,mBAAc,EAAA,mBAAA;kBACd,cAAA,EAAgB,cAAE;kBAClB,gBAAc,EAAA,kBAAA,GAAA,UAAA,GAAA,KAAA,CAAA;kBACd,cAAc,EAAA,cAAA;kBACb,cAAA,EAAA;gBAGL,CAAA,CAAA;iBACA,SAAI,CAAA;oBACF,EAAA,SAAA,CAAK,WAAkB,EAAC;kBAOxB,IAAI,CAAC,gBAAc,EAAA;sBACjB,EAAA,SAAQ,IAAA,WAAa,CAAA,IAAA,WAAA,CAAA,OAAA,KAAA,KAAA,EAAA;oBACtB,OAAA,CAAA,WAAA,CAAA;kBACF;gBAED,CAAA;gBACE,KAAA,EAAA,SAAA,CAAI,GAAA,EAAA;sBACF,kBAAkB,EAAC;oBACnB,kBAAkB,CAAC,OAAK,GAAG,KAAI;oBAChC,kBAAA,CAAA,KAAA,GAAA,GAAA;kBAED;sBACE,kBAAW,EAAA;oBACZ,IAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,UAAA,CAAA;kBAED;kBAEA,IAAA,CAAA,gBACK,EAAY;kBACb,MAAA,CAAA,GAAA,YAAiB,WAAA,GAAA,GAAA,GAAA,IAAA,WAAA,CAAA;oBAEnB,YAAA,EAAA;kBACH,CAAA,CAAA,CAAA;gBACA;cACF,CAAA,CAAA;;;;IACJ,CAAA,CAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SA+MC,CAAA,kBAAA,GAAA,UAAA,QAAA,EAAA,KAAA,EAAA;IAzLC,IAAA,KAAA,GAAA,IAAA;IAEM,IAAA,KAAA,KAAW,KAAA,CAAA,EAAQ;MAAb,KAAc,GAAA,IAAA,CAAA,KAAA;IAAA;IAC1B,IAAM,MAAA,GAAA,QAAuC,CAAA,MAAA;IAC7C,IAAM,WAAS,GAAG,EAAA;IAElB,IAAI,SAAC,GAAS,QAAI,CAAA,WAAkB,KAAA,UAAQ;QAC1C,CAAA,SAAK,IAAA,iBAAA,CAAA,MAAiC,EAAC,QAAS,CAAA,WAAA,CAAA,EAAA;UAC9C,CAAA,iCAAiB,CAAA,MAAA,CAAA,EAAA;QACf,WAAM,CAAE,IAAA,CAAA;UACR,MAAM,EAAE,MAAA,CAAA,IAAA;UACR,MAAK,EAAE,eAAS;UAChB,KAAA,EAAA,QAAW,CAAA,QAAS;UACnB,SAAA,EAAA,QAAA,CAAA;QACJ,CAAA,CAAA;MACD;UACE,iCAA+B,CAAA,MAAA,CAAA,IAAA,eAAA,CAAA,MAAA,CAAA,WAAA,CAAA,EAAA;YAC7B,IAAI,GAAA,KAAA,CAAA,IAAA,CAAA;UAIJ,EAAA,EAAA,eAAY;UACZ,KAAA,EAAA,IAAW,CAAA,SAAS,CAAA,QAAS,CAAA,QAAA,CAAA,CAAA,OAAA;UAC7B,SAAA,EAAU,QAAO,CAAA,SAAA;UACjB,UAAA,EAAA,KAAiB;UAChB,iBAAA,EAAA;QACH,CAAA,CAAA;QACA,IAAI,UAAK,GAAQ,KAAA,CAAA;YACf,IAAA,CAAA,MAAU,EAAG;UACd,UAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,MAAA,EAAA,MAAA,CAAA;QACD;YAGG,OAAuB,UAAO,KAAA,WAAW,EAAA;UAC1C,MAAA,CAAA,IAAW,GAAC,UAAK;UACf,WAAM,CAAE,IAAA,CAAA;YACR,MAAM,EAAE,UAAA;YACR,MAAK,EAAE,eAAS;YAChB,KAAA,EAAA,QAAW,CAAA,QAAS;YACpB,SAAA,EAAA,QAAA,CAAA;UACH,CAAA,CAAA;QACF;MAEO;MACR,IAAI,eAAa,GAAE,QAAA,CAAA,aAAA;UACjB,eAAa,EAAA;aAAW,OAAA,CAAA,OAAA,CAAA,UAAe,EAAA,EAAA,OAAA,EAAA;UACrC,IAAM,eAAY,GAAA,EAAA,CAAA,eAAmB;UACrC,IAAI,SAAC,GAAS,eAAK,IAAe,eAAK,CAAA,SAAe;cACpD,CAAA,SAAO,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,eAAA,EAAA,SAAA,CAAA,EAAA;YACR;UACD;UACM,IAAA,OAA0B,GAAI,eAAa,CAAzC,SAAA,CAAA;UAGF,IAAA,EAAA,GAA2C,KAAK,CAAC,OAAY,CAAA,GAAA,CAAA,OAAA,CAAA;YAAA,QAAA,GAAA,EAAA,CAAA,QAAA;YAAA,SAAA,GAAA,EAAA,CAAA,SAAA;cACjE,EAAA,GAAK,KAAE,CAAA,IAAS,CAAA;cAChB,KAAA,EAAA,QAAS;cACT,SAAA,EAAA,SAAmB;cACnB,iBAAiB,EAAA,IAAA;cAJH,UAAA,EAAA;YAOhB,CAAA,CAAA;YAAI,kBAAY,GAAA,EAAA,CAAA,MAAkB;YAAE,QAAA,GAAA,EAAA,CAAA,QAAA;cAElC,QAAM,IAAA,kBAA0B,EAAA;gBAC9B,eAAc,GAAE,OAAM,CAAA,kBAAA,EAAA;cACtB,cAAW,EAAA,MAAQ;cACnB,SAAA,EAAA,QAAgB,IAAA,gBAAU,CAAA,QAAA,CAAA,IAAA,KAAA,CAAA;cACzB,cAAA,EAAA;YAGH,CAAA,CAAA;gBACE,eAAY,EAAK;cACf,WAAM,CAAE,IAAA,CAAA;gBACR,MAAM,EAAE,eAAY;gBACpB,MAAK,EAAE,YAAS;gBAChB,KAAA,EAAA,QAAS;gBACR,SAAA,EAAA;cACJ,CAAA,CAAA;YACF;UACA;QACJ,CAAA,CAAA;MACF;IAED;QAEE,WAAS,CAAA,MAAA,GAAA,CAAA,IACT,QAAQ,CAAC,cAAM,IACf,QAAQ,CAAC,MAAA,IACT,QAAQ,CAAC,cAAA,IAET,QAAM,CAAA,gBAAoB,EAAA;MAE1B,IAAI,SAAC,GAAA,EAAA;UACH,CAAA,cAAa,CAAA;QACX,WAAK,EAAA,SAAA,CAAW,KAAA,EAAA;cACd,CAAA,SAAA,EAAY;YACb,WAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;cAAA,OAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA;YAAA,CAAA,CAAA;UAKO;UAGR,IAAM,MAAA,GAAA,QACH,CAAA,MAAA;cACD,aAAC,GAAA,CAAA,sBAAkC,CAAA,MAAW,CAAC,IAE7C,iCAAQ,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,OAAA;cACV,MAAK,EAAA;gBAKH,CAAA,SAAU,EAAG;kBACX,IAAI,GAAA,KAAA,CAAA,IAAA,CAAA;gBAIJ,EAAA,EAAA,eAAY;gBACZ,KAAA,EAAA,KAAW,CAAA,SAAS,CAAA,QAAS,CAAA,QAAA,CAAA,CAAA,OAAA;gBAC7B,SAAA,EAAU,QAAO,CAAA,SAAA;gBACjB,UAAA,EAAA,KAAiB;gBAChB,iBAAA,EAAA;cAEH,CAAA,CAAA;kBACE,IAAA,CAAA,QAAM,EAAA;gBACN,MAAI,GAAA,QAAa,CAAA,QAAI,CAAM,CAAA,CAAE,EAAA,MAAA,CAAA,EAAA;kBAAA,IAAA,EAAA,IAAA,CAAA;gBAAA,CAAA,CAAA;oBAC3B,aAAa,IAAC,MAAA,EAAW;kBAC1B,OAAA,MAAA,CAAA,WAAA;gBACD;oBACE,SAAO,IAAM,MAAC,EAAO;kBACtB,OAAA,MAAA,CAAA,OAAA;gBACF;cACF;YAKD;gBACE,aAAY,EAAE;cACZ,MAAA,CAAA,KAAO,EAAE,MAAA,EAAS;gBAClB,OAAA,EAAS,QAAE,CAAA,OAAS;gBACnB,SAAA,EAAA,QAAA,CAAA;cACJ,CAAA,CAAA;YACF;UAID;cACE,CAAA,SAAM,IAAO,CAAA,QAAA,CAAA,cAAA,IAAA,aAAA,EAAA;YACX,KAAA,CAAE,MAAE,CAAA;cACJ,EAAA,EAAA,eAAO;sBAAS,SAAA,CAAS,KAAA,EAAA,EAAA,EAAA;gBACvB,IAAA,SAAO,GAAS,EAAA,CAAA,SAAK;kBAAA,MAAe,GAAA,EAAK,CAAC,MAAE;gBAC7C,OAAA,SAAA,KAAA,YAAA,GAAA,KAAA,GAAA,MAAA;cACA;YACJ,CAAA,CAAA;UACF;QAED,CAAA;QAGA,OAAA,EAAA,QAAiB,CAAA,cAAA;QAIjB,UAAA,EAAA,KAAgB;QAMhB,gBAAgB,EAAA,QAAS,CAAA,gBAAkB;QAE1C,cAAQ,EAAA,QAAM,CAAA,cAAI,IAAA;MAErB,CAAA,CAAA,CAAA,OAAI,CAAA,UAAS,MAAA,EAAA;QAAA,OAAuB,SAAS,CAAA,IAAA,CAAA,MAAc,CAAA;MAAE,CAAA,CAAA;UAI3D,QAAO,CAAA,mBAAmB,IAAE,QAAK,CAAA,cAAM,EAAA;QACxC,OAAA,OAAA,CAAA,GAAA,CAAA,SAAA,CAAA,CAAA,IAAA,CAAA,YAAA;UAAA,OAAA,MAAA;QAAA,CAAA,CAAA;MACF;IAED;IACD,OAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SA4BC,CAAA,sBAAA,GAAA,UAAA,kBAAA,EAAA,QAAA,EAAA;IAdC,IAAM,KAAI,GAAG,IAAA;QACX,IAAE,GAAA,OAAA,kBAA4B,KAAA,UAAU,GACtC,kBAAkB,CAAC,QAAA,CAAA,SAAA,CAAA,GAEvB,kBAAkB;IAChB,OAAA,IAAI,CAAA,KAAA,CAAA,2BAAA,CAAA,UAAA,KAAA,EAAA;UACF;QAID,KAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA;UAAA,MAAA,EAAA;YAAA,IAAA,EAAA;UAAA;QAAA,CAAA,CAAA,EAAA,KAAA,CAAA;MAAC,CAAA,CACA,OAAA,KAAA,EAAU;QACX,OAAA,IAAA,SAAA,CAAA,KAAA,CAAA,KAAA,CAAA;MACA;IACJ,CAAA,EAAA,QAAA,CAAA,UAAA,CAAA;EAEM,CAAP;EAKE,YAAO,CAAA,SAAK,CAAA,UAAA,GAAoB,UAE9B,OAAO,EACP,OAAA,EAAA,aACO,EAAC;IACX,OAAA,IAAA,CAAA,oBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,aAAA,CAAA,CAAA,OAAA;EAEM,CAAP;EACE,YAAM,CAAK,SAA0C,CAAC,aAAa,GAAA,YAAA;IACnE,IAAI,KAAC,GAAO,MAAC,CAAA,MAAQ,CAAA,IAAA,CAAC;QACpB,CAAA,OAAM,CAAA,OAAQ,CAAG,UAAA,IAAA,EAAA,OAAA,EAAA;MACf,KAAA,CAAA,OAAS,CAAA,GAAE;QACX,SAAA,EAAA,IAAe,CAAA,SAAK;QACpB,aAAY,EAAE,IAAK,CAAA,aAAY;QAC/B,YAAA,EAAa,IAAE,CAAI,YAAC;QACpB,aAAA,EAAA,IAAA,CAAA;MACD,CAAA;IACH,CAAA,CAAA;IACD,OAAA,KAAA;EAEM,CAAP;EACE,YAAM,CAAA,SAAY,CAAA,WAAa,GAAI,UAAS,OAAA,EAAA;IAC5C,IAAI,SAAS,GAAE,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA;QACb,SAAS,EAAC;MACV,SAAS,CAAC,YAAA,GAAa,SAAM;MAC9B,SAAA,CAAA,aAAA,GAAA,EAAA;IACF;EAMM,CAAP;EACU,YAAA,CAAA,SAAc,CAAA,SAAS,GAAT,UAAU,QAAA,EAAA;IAEhC,IAAI,cAAC,GAAe,IAAI,CAAA,cAAW;QACjC,CAAA,cAAiB,CAAA,GAAG,CAAA,QAAU,CAAC,EAAA;MAC/B,IAAM,WAAA,GAAY,IAAG,CAAA,KAAA,CAAA,iBAAA,CAAA,QAAA,CAAqC;MAC1D,IAAM,YAAW,GAAG,qCAA4B,CAAW,WAAE,CAAA;MAC7D,IAAM,WAAW,GAAG,IAAA,CAAA,UAAY,CAAI,WAAK,CAAA,WAAW,CAAA;MAEpD,IAAM,WAAA,GAAU,YAAwB,IAAA,IAAA,CAAA,UAAA,CAAA,WAAA,CAAA,YAAA,CAAA;UACtC,YAAU,GAAA;QAGV,QAAA,EAAA,WAAkB;QAClB,gBAAA,EAAkB,gBAAO,CAAU,WAAC,CAAA;QACpC,kBAAW,EAAA,IAAA,CAAA,UAAA,CAAA,oBAAA,CAAA,WAAA,CAAA;QACX,WAAW,EAAA,WAAA;QACX,WAAW,EAAE,WAAA;QAKb,WAAO,EAAA,gBAAA,CAAA,sBAEL,CAAA,WAAa,CAAA,CAAA;eACX,EAAA,QAAQ,CAAA,QAAS,CAAA,CAAA,CAAA,EAAA,WAAA,CAAA,EAAA;UAAqB,WAAA,EAAA,WAAA,CAAA,WAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA;gBAClC,GAAG,CAAC,IAAA,KAAS,qBAAc,IAC7B,GAAA,CAAA,SAAA,KAAA,OAAA,EAAA;cACD,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA;gBAAA,SAAA,EAAA;cAAA,CAAA,CAAA;YACD;YACA,OACH,GAAA;UACD,CAAA;QAAA,CAAA;MAEF,CAAA;UACE,GAAA,GAAI,SAAA,CAAQ,GAAA,EAAA;YACV,GAAA,IAAA,CAAA,cAAsB,CAAA,GAAE,CAAA,GAAA,CAAA,EAAA;UACzB,cAAA,CAAA,GAAA,CAAA,GAAA,EAAA,YAAA,CAAA;QACF;MAID,CAAA;MACA,GAAG,CAAC,QAAA,CAAA;MACJ,GAAG,CAAC,WAAW,CAAC;MAChB,GAAG,CAAC,WAAW,CAAC;MACjB,GAAA,CAAA,WAAA,CAAA;IAED;IACD,OAAA,cAAA,CAAA,GAAA,CAAA,QAAA,CAAA;EAEO,CAAR;EAIE,YAAA,CAAA,SAAA,CAAA,YACK,GAAK,UAAU,QAAQ,EAAE,SAAA,EAAW;IAG1C,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,WAAA,CAAA,EAAA,SAAA,CAAA;EAEM,CAAP;EAIE,YAAO,CAAA,SAAA,CAAA,UAAA,GACF,UAAO,OACV,EAAA;IAMF,OAAI,GAAA,QAAc,CAAC,QAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA;MAAA,SAAgC,EAAA,IAAA,CAAA,YAAa,CAAA,OAAA,CAAA,KAAA,EAAA,OAAA,CAAA,SAAA;IAAA,CAAA,CAAA;QAC9D,OAAO,OAAC,CAAA,2BAA8B,KAAM,WAAA,EAAA;MAC7C,OAAA,CAAA,2BAAA,GAAA,KAAA;IAED;IACA,IAAM,SAAA,GAAU,IAAG,SAAI,CAAA,IAAA,CAAA;QACrB,UAAA,GAAY,IAAE,eAAI,CAAA;MAClB,YAAS,EAAA,IAAA;MACT,SAAO,EAAA,SAAA;MACN,OAAA,EAAA;IAEH,CAAA,CAAA;IAEA,IAAA,CAAA,OAAU,CAAA,GAAK,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,CAAA;IACb,SAAA,CAAA,IAAU,CAAA;MACV,QAAA,EAAA,UAAiB,CAAA,KAAA;MACjB,eAAW,EAAA,UAAW;MACrB,SAAA,EAAA,UAAA,CAAA;IAEH,CAAA,CAAA;IACD,OAAA,UAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SA6BC,CAAA,KAAA,GAAA,UAAA,OAAA,EAAA,OAAA,EAAA;IA3BC,IAAA,KAAA,GAAA,IAAA;IAEA,IAAA,OACE,KAAA,KAAQ,CAAA,EAAK;MACb,OAAA,GAAA,IAAA,CAAA,eAAA,EAAA;IAAA;IACE,OAAA,GAAA,SAAA,CAAA,OACH,CAAC,KAAA,EAAA,mEAAA,GAEF,sBACgB,CAAA,GAAI,SAAK,CAAA,OACvB,CAAA,KAAA,EAAA,EAAA,CAAA;IAGF,OAAA,GACE,SAAkB,CAAA,OAAA,CAAA,KAAA,CAAA,IAClB,KAAA,UAAA,EAAA,gDACA,CAAA,GAAA,SAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,KAAA,UAAA,EAAA,EAAA,CAAA;IAEF,OAAA,GACE,SAAkB,CAAA,CAAA,OAAA,CAAA,iBAClB,EAAA,wDACA,CAAA,GAAA,SAAA,CAAA,CAAA,OAAA,CAAA,iBAAA,EAAA,EAAA,CAAA;IAEF,OAAO,GAAA,SAAK,CAAA,CAAA,OACV,CAAA,YAEA,EAAA,mDAAqC,CAAvB,GAAwB,SAAC,CAAA,CAAA,OAAA,CAAA,YAAA,EAAA,EAAA,CAAA;IAC1C,OAAA,IAAA,CAAA,UAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA,OAAA,CAAA,YAAA;MAAA,OAAA,KAAA,CAAA,SAAA,CAAA,OAAA,CAAA;IAAA,CAAA,CAAA;EAGM,CAAP;EACE,YAAO,CAAA,SAAW,CAAC,eAAc,GAAI,YAAA;IACtC,OAAA,MAAA,CAAA,IAAA,CAAA,cAAA,EAAA,CAAA;EAGM,CAAP;EACE,YAAO,CAAA,SAAK,CAAA,iBAAmB,GAAA,YAAA;IAChC,OAAA,IAAA,CAAA,gBAAA,EAAA;EAGM,CAAP;EACE,YAAO,CAAA,SAAW,CAAC,kBAAiB,GAAI,YAAA;IACzC,OAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,CAAA;EAEM,CAAP;EACE,YAAK,CAAA,SAAA,CAAA,gBAA4B,GAAA,UAAS,OAAA,EAAA;IAC1C,IAAI,CAAC,2BAAmB,CAAA,OAAA,CAAA;IACzB,IAAA,CAAA,gBAAA,EAAA;EAEO,CAAR;EACE,YAAM,CAAA,SAAY,CAAA,2BAA0B,GAAA,UAAA,OAAA,EAAA;IAC5C,IAAI,SAAS,GAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA;QAAE,SAAS,EACzB,SAAA,CAAA,IAAA,EAAA;EAEM,CAAP;EAAkB,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,OAAA,EAAA;QAChB,OAAA,KAAA,KAAgB,CAAA,EAAI;MAAA,OAAA,GAAA;QACrB,cAAA,EAAA;MAMC,CAAA;IAAA;IAIA,IAAI,CAAC,oBAAgB,CAAA,OAAA,GAAA,IAAS,cAAA,CAAA,qEAAA,CAAA,GAAA,IAAA,cAAA,CAAA,EAAA,CAAA,CAAA;QAC5B,CAAA,OAAI,CAAA,OAAU,CAAA,UAAA,SAAiB,EAAA;UAG7B,SAAS,CAAC,eAAa,EAAG;QAC3B,SAAA,CAAA,aAAA,GAAA,aAAA,CAAA,OAAA;OAAM,MACL;QACD,SAAA,CAAA,IAAA,EAAA;MACA;IAEH,CAAA,CAAA;QACE,IAAI,CAAC,aAAa,EAAA;MACnB,IAAA,CAAA,aAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA;IAGD;IACD,OAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SAuFC,CAAA,oBAAA,GAAA,UAAA,OAAA,EAAA;IAtFC,IAAA,KAAA,GAAA,IAAA;IAEA,IAAM,OAAO,KAAG,KAAO,CAAA,EAAiC;MAAA,OAAA,GAAA,QAAA;IAAA;IACxD,IAAM,OAAA,GAAA,IAAA,GAAiB,EAAA;IACvB,IAAM,iBAAA,GAAkB,IAAG,GAAI,EAAG;IAElC,IAAI,kBAAc,GAAO,IAAG,GAAA,EAAA;QAC1B,KAAA,CAAA,OAAQ,CAAA,OAAQ,CAAA,EAAA;MACd,OAAA,CAAI,OAAO,CAAA,UAAS,IAAA,EAAQ;YAC1B,OAAA,IAAA,KAAA,QAAsB,EAAI;UAC3B,iBAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA;SAAM,MACL,IAAA,cAAkB,CAAA,IAAI,CAAA,EAAI;UAC3B,iBAAA,CAAA,GAAA,CAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,CAAA,QAAA,EAAA,KAAA,CAAA;SAAM,MACL,IAAA,eAAmB,CAAA,IAAI,CAAA,IAAM,IAAA,CAAA,KAAA,EAAA;UAC9B,kBAAA,CAAA,GAAA,CAAA,IAAA,CAAA;QACA;MACJ,CAAA,CAAA;IAED;SAAyC,OAAE,CAAA,OAAA,CAAA,UAAA,EAAE,EAAA,OAAQ,EAAA;MACnD,IAAI,EAAE,GAAE,EAAA,CAAA,eAAA;QAAA,QAAA,GAAA,EAAA,CAAA,QAAA;UACN,EAAA,EAAI;YACF,OAAO,KAAK,KAAA,EAAO;UACnB,OAAO,CAAA,GAAA,CAAA,OAAA,EAAA,EAAA,CAAA;UACR;QAGC;QAIF,IACE,SAAA,GAAW,EAAA,CAAA,SAAK;UAAS,WAAA,GAAA,EAAA,CAAA,OAAA,CAAA,WAAA;YACzB,WAAQ,KAAK,SAAY,IAEzB,OAAO,KAAA,QAAA,IAAA,CAAA,EAAA,CAAA,YAAA,EAAA,EAAA;UACR;QAED;YAEE,OAAC,KAAS,QAAI,IACb,SAAQ,IAAI,iBAAkB,CAAA,GAAI,CAAA,SAAU,CAC7C,IACA,QAAQ,IAAI,iBAAa,CAAA,GAAA,CAAA,QAAA,CAAA,EAAA;UACzB,OAAI,CAAA,GAAA,CAAA,OAAS,EAAA,EAAA,CAAA;cAAE,SAAA,EACX,iBAAQ,CAAA,GAAA,CAAA,SAAA,EAAA,IAAA,CAAA;cAAE,QAAA,EACf,iBAAA,CAAA,GAAA,CAAA,QAAA,EAAA,IAAA,CAAA;QACF;MACA;IAEH,CAAA,CAAA;QACE,kBAAkB,CAAC,IAAA,EAAA;MAIjB,kBAAgB,CAAA,OAAA,CAAA,UAAa,OAAA,EAAA;QAC7B,IAAM,OAAA,GAAS,YAAQ,CAAA,oBAAuB,CAAA;YAC5C,SAAQ,GAAE,KAAO,CAAC,QAAK,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA;UACvB,QAAA,EAAS,OAAE,CAAO,KAAC;UAClB,SAAA,EAAA,OAAA,CAAA;QACH,CAAA,CAAA;YACE,EAAA,GAAA,IAAA,eAAkB,CAAA;UAClB,YAAS,EAAA,KAAA;UACT,SAAO,EAAA,SAAA;UAIN,OAAA,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA;YAAA,WAAA,EAAA;UAAA,CAAA;QACH,CAAA,CAAA;QACA,SAAS,CAAC,EAAA,CAAA,OAAA,KAAA,OAAsB,CAAC;QACjC,SAAQ,CAAA,kBAAiB,CAAA,EAAA,CAAA;QACxB,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,EAAA,CAAA;MACJ,CAAA,CAAA;IAED;QACE,OAAA,IAAA,iBAA0B,CAAA,IAAA,EAAA;MACxB,iBAAa,CAAA,OAAE,CAAA,UAAA,QAAA,EAAA,SAAA,EAAA;YACb,CAAA,QAAS,EAAC;UAKX,OAAA,IAAA,SAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,OAAA,SAAA,KAAA,QAAA,GAAA,QAAA,GAAA,EAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,EAAA,IAAA,EAAA,CAAA,CAAA,EAAA,oDAAA,CAAA,CAAA;QACA;MACJ,CAAA,CAAA;IAED;IACD,OAAA,OAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SAqBC,CAAA,wBAAA,GAAA,UAAA,cAAA,EAAA;IApBC,IAAA,KAAA,GAAA,IAAA;IAEA,IAAM,cAAA,KAAA,KAAuB,CAAA,EAAsC;MAAG,cAAA,GAAA,KAAA;IAAA;IAEtE,IAAI,uBACF,GAAA,EAAA;QAEQ,CAAA,oBAAgB,CAAA,cAAgB,GAAA,KAAO,GAA5B,QAA6B,CAAA,CAAA,OAAA,CAAA,UAAA,eAAA,EAAA,OAAA,EAAA;MAChD,IAAA,WAAe,GAAC,eAAgB,CAAE,OAAC,CAAA,WAAA;MACnC,eAAI,CAAA,gBAAc,EAAA;UACd,cAAY,IACX,WAAA,KAAW,SAAK,IACnB,WAAA,KAAA,YAA6B,EAAA;QAC9B,uBAAA,CAAA,IAAA,CAAA,eAAA,CAAA,OAAA,EAAA,CAAA;MACD;MACC,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,OAAA,CAAA,IAAA,CAAA;IAEH,CAAA,CAAA;IAEA,IAAA,CAAA,gBAAmB,EAAA;IACpB,OAAA,OAAA,CAAA,GAAA,CAAA,uBAAA,CAAA;EAEM,CAAP;EACE,YAAK,CAAA,SAAS,CAAA,kBAAuB,GAAE,UAAA,eAAmB,EAAA;IAC3D,IAAA,CAAA,QAAA,CAAA,eAAA,CAAA,OAAA,CAAA,CAAA,kBAAA,CAAA,eAAA,CAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SA0DC,CAAA,wBAAA,GAAA,UAAA,EAAA,EAAA;QAzDC,KAAK,GAAA,IAAA;IAML,IAAA,KAAQ,GAAI,EAAC,CAAA,KAAA;MAAS,WAAQ,GAAA,EAAQ,CAAC,WAAA;MAAA,WAAA,GAAA,EAAA,CAAA,WAAA;MAAA,SAAA,GAAA,EAAA,CAAA,SAAA;MAAA,EAAA,GAAA,EAAA,CAAA,OAAA;MAAA,OAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA;IACvC,KAAA,GAAA,IAAY,CAAA,SAAK,CAAA,KAAA,CAAY,CAAC,QAAO;IAErC,SAAM,GAAA,IAAA,CAAA,YAAiB,CAAA,KAAC,EAAA,SAA6B,CAAA;QACnD,cAAK,GAAA,SAAA,CAAA,SACH,EAAA;MAIA,OAAA,KAAI,CAAA,qBAA0B,CAAA,KAAE,EAAA,OAAA,EAAA,SAAA,CAAA,CAAA,GAAA,CAAA,UAAA,MAAA,EAAA;YAG9B,WAAI,KAAA,UAAkB,EAAM;cAC1B,iBAAgB,CAAC,MAAA,EAAA,WAAA,CAAA,EAAA;YACf,KAAA,CAAA,KAAK,CAAA,KAAA,CAAA;cACL,KAAA,EAAM,KAAE;cACR,MAAM,EAAE,MAAA,CAAA,IAAA;cACR,MAAA,EAAA,mBAAoB;cACnB,SAAA,EAAA;YACJ,CAAA,CAAA;UAED;UACD,KAAA,CAAA,gBAAA,EAAA;QAED;YACE,qBAAqB,CAAC,MAAA,CAAA,EAAA;UACpB,MAAA,IAAA,WAAe,CAAA;YACd,aAAA,EAAA,MAAA,CAAA;UACJ,CAAA,CAAA;QAED;QACA,OAAA,MAAA;MAAC,CAAA,CAAA;IAEL,CAAA;QACE,IAAM,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,gBAAyB,EAAA;MAM/B,IAAA,mBAAsC,GAAA,IAAA,CAAA,UAAQ,CAAA,oBAAA,CAAA,KAAA,EAAA,SAAA,EAAA,OAAA,CAAA,CAAA,IAAA,CAAA,cAAA,CAAA;MAC5C,OAAA,IAAO,UAAuC,CAAA,UAAA,QAAA,EAAA;QAC9C,IAAA,GAAA,GAAA,IAAA;QAIA,mBAAO,CAAA,IAAM,CAAA,UAAO,UAAI,EAAA;UAAX,OAAyB,GAAA,GAAA,UAAA,CAAA,SAAA,CAAA,QAAA,CAAA;QAAA,CAAA,EAAA,QAAA,CAAA,KAAA,CAAA;QACrC,OAAA,YAAA;UAAA,OAAA,GAAA,IAAA,GAAA,CAAA,WAAA,EAAA;QAAA,CAAA;MACJ,CAAA,CAAA;IAED;IACD,OAAA,cAAA,CAAA,SAAA,CAAA;EAEM,CAAP;EACE,YAAK,CAAA,SAAA,CAAA,SAAqB,GAAA,UAAS,OAAA,EAAA;IACnC,IAAI,CAAC,oBAAmB,CAAA,OAAA,CAAA;IACzB,IAAA,CAAA,gBAAA,EAAA;EAEO,CAAR;EACE,YAAK,CAAA,SAAA,CAAA,oBAA4B,GAAS,UAAA,OAAA,EAAA;IAC1C,IAAI,CAAC,2BAAqB,CAAA,OAAA,CAAA;IAC3B,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA;EAEM,CAAP;EAME,YAAK,CAAA,SAAA,CAAc,WAAQ,GAAA,UAAS,OAAA,EAAA;IACpC,IAAI,CAAA,cAAa,CAAG,MAAC,CAAA,OAAU,CAAA;QAC7B,IAAI,CAAC,OAAA,CAAQ,GAAC,CAAA,OAAS,CAAA,EAAI;MAC3B,IAAI,CAAC,QAAQ,CAAA,OAAO,CAAA,CAAA,IAAO,EAAE;MAC9B,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,CAAA;IACF;EAEM,CAAP;EACE,YAAQ,CAAC,SAAA,CAAA,gBAAW,GAAA,YAAA;QAAE,IAAI,CAAC,WAAW,EAClC,IAAC,CAAA,WAAe,EAAC;IACtB,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;MAAA,OAAA,IAAA,CAAA,MAAA,EAAA;IAAA,CAAA,CAAA;EAEM,CAAP;EACE,YAAO,CAAA,SAAK,CAAA,aAAW,GAAA,YAAA;IACxB,OAAA,IAAA,CAAA,UAAA;EAOO,CAAR;EAAA,YAAA,CAAA,SA0EC,CAAA,qBAAA,GAAA,UAAA,KAAA,EAAA,OAAA,EAAA,SAAA,EAAA,aAAA,EAAA;;IAtEC,IAAA,EAAA;IAKA,IAAI,aAAuC,KAAA,KAAA,CAAA,EAAA;MAAA,aAAA,GAAA,CAAA,EAAA,GAAA,OAAA,KAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,kBAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,IAAA,CAAA,kBAAA;IAAA;IAEnC,IAAA,UAAA;IACR,IAAI,WAAW,GAAE,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,WAAA;QACT,WAAoC,EAAlC;MAER,IAAM,EAAA,GAAA,IAAS;QAAA,yBAAG,GAAA,EAAA,CAAA,uBAAA;QAAA,IAAA,GAAA,EAAA,CAAA,IAAA;UAChB,SAAO,GAAA;QACP,KAAA,EAAA,WAAS;QACT,SAAA,EAAA,SAAe;QACf,aAAa,EAAC,gBAAc,CAAA,WAAA,CAAA,IAAA,KACvB,CAAA;QAGL,OAAA,EAAA,IAAA,CAAA,cAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA;UAAA,UAAA,EAAA,CAAA;QAAA,CAAA,CAAA;MAEF,CAAA;MAEA,OAAI,GAAA,SAAe,CAAA,OAAA;UACjB,aAAM,EAAA;QACN,IAAA,aAAA,GAAA,yBAAyC,CAAA,GAAA,CAAA,WAAa,CAAA,IAAA,IAAA,GAAA,EAAA;QAEtD,yBAAgB,CAAA,GAAA,CAAA,WAAmB,EAAA,aAAW,CAAA;QAC9C,IAAA,SAAa,GAAA,kBAAgB,CAAA,SAAS,CAAA;QAEtC,UAAK,GAAA,aAAY,CAAA,GAAA,CAAA,SAAA,CAAA;YACf,CAAA,UAAa,EAAA;cACX,OAAO,GAAC,IAAM,OAAA,CAAA,CACb,OAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAEH,CAAA;UAEA,aAAQ,CAAA,GAAA,CAAU,SAAC,EAAA,UAAA,GAAA,OAAA,CAAA;UACjB,OAAA,CAAI,UAAA,CAAA,YAAmB;gBACnB,aAAW,CAAC,MAAI,CAAG,SAAG,CAAA,IACxB,aAAA,CAAA,IAAA,GAAA,CAAA,EAAA;cACD,yBAAA,CAAA,MAAA,CAAA,WAAA,CAAA;YACA;UACJ,CAAA,CAAA;QAEF;OAAM,MACL;QACE,UAAA,GAAQ,IAAI,OAAE,CAAA,CACb,OAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CACJ,CAAA;MACF;KAAM,MACL;MACE,UAAA,GAAA,IAAa,OAAO,CAAA,CACnB,UAAA,CAAA,EAAA,CAAA;QAAA,IAAA,EAAA,CAAA;MAAA,CAAA,CAAA,CACH,CAAA;MACD,OAAA,GAAA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA;IAEO;IACR,IAAI,WAAW,GAAE,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,WAAA;QACf,WAAU,EAAG;MACX,UAAA,GAAO,QAAK,CAAA,UAAW,EAAA,UAAa,MAAA,EAAA;QAClC,OAAA,KAAQ,CAAA,UAAE,CAAA,YAAW,CAAA;UACrB,QAAA,EAAA,WAAoB;UACpB,YAAO,EAAA,MAAA;UACP,OAAA,EAAS,OAAA;UACR,SAAA,EAAA;QACF,CAAA,CAAA;MACJ,CAAA,CAAA;IAED;IACD,OAAA,UAAA;EAEO,CAAR;EASE,YAAM,CAAA,SAAY,CAAA,kBAAU,GAAa,UAAQ,SAAA,EAAA,kBAAoB,EAAA,OAAA,EAAA;IAKrE,IAAM,SAAA,GAAY,SAAQ,CAAA,aAAM,GAAA,IAAgB,CAE9C,iBAAe,EAAA;IAGjB,IAAA,YACE,GAAA,IAAK,CAAA,KAAA,CAAA,gBACH,CAAA,IAAA,CAAA,SACA,CAAA,SAAQ,CAAO,QACf,CAAO,CAAC,QAAA,CAAS;IAIjB,OAAA,QAAM,CAAA,IAAA,CAAa,qBAAG,CAAA,YAA2B,EAAM,OAAE,CAAA,OAAA,EAAA,OAAA,CAAA,SAAA,CAAA,EAAA,UAAA,MAAA,EAAA;MACzD,IAAM,aAAY,GAAA,0BAAyB,CAAA,MAAA,CAAA;MAI3C,IAAI,SAAS,GAAA,aAAc,CAAA,MAAA,GAAA,CAAa;UACtC,SAAI,IAAS,SAAI,CAAA,aAAmB,EAAA;YAElC,SAAM,IAAA,OAAU,CAAA,WAAc,KAAA,MAAY,EAAA;UACxC,MAAA,SAAA,CAAA,SAAa,CAAA,IAAA,WAAA,CAAA;YACX,aAAA,EAAA;UACL,CAAA,CAAA,CAAA;QAID;QACA,SAAS,CAAC,UAAS,CAAE,MAAC,EAAA,YAAA,EAAA,OAAA,EAAA,kBAAA,CAAA;QACvB,SAAA,CAAA,SAAA,EAAA;MAED;UACE,GAAA,GAAM;QACN,IAAA,EAAA,MAAS,CAAA,IAAK;QACd,OAAA,EAAA,KAAa;QACb,aAAA,EAAA,aAAA,CAAA;MAEF,CAAA;UACE,SAAI,IAAS,OAAA,CAAA,WAAc,KAAA,QAAA,EAAA;QAC3B,GAAG,CAAC,MAAA,GAAA,aAAgB;QACrB,GAAA,CAAA,aAAA,GAAA,aAAA,CAAA,KAAA;MAED;MAGF,OAAA,GAAA;OACE,UAAW,YAAG,EAAA;UACZ,KAAE,GAAA,aAAY,CAAA,YAAA,CAAA,GACZ,YAAI,GAGJ,IAAA,WAAa,CAAA;QAAA,YAAU,EAAA;MAAe,CAAA,CAAA;UACxC,SAAS,IAAC,SAAU,CAAA,aAAO,EAAA;QAC5B,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA;MAED;MAEF,MAAA,KAAA;IACH,CAAA,CAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SA0FC,CAAA,oBAAA,GAAA,UAAA,OAAA,EAAA,OAAA,EAAA,aAAA,EAAA;IApFC,IAAA,KAAA,GAAA,IAAA;IAEA,IAAM,aAAa,KAAA,KAAU,CAAA,EAAA;MAAA,aAAe,GAAA,aAAS,CAAA,OAAA;IAAA;IACrD,IAAM,KAAA,GAAA,IAAY,CAAA,SAAK,CAAA,OAAa,CAAA,KAAK,CAAE,CAAA,QAAQ;IACnD,IAAM,SAAS,GAAG,IAAI,CAAC,YAAS,CAAA,KAAS,EAAA,OAAA,CAAA,SAAA,CAAA;IAEzC,IAAM,SAAQ,GAAG,IAAK,CAAA,QAAA,CAAA,OAAe,CAAA;IAEnC,IAAA,QAKE,GAAA,IAAO,CALT,cAAA,CAAA,UAAW;IAOb,IAAM,EAAA,GAAA,OAAU,CAAG,WAAO;MAAM,WAAK,GAAS,EAAA,KAAA,KAAA,CAAA,GAAA,QAAA,IAAA,QAAA,CAAA,WAAA,IAAA,aAAA,GAAA,EAAA;MAAA,EAAA,GAAA,OAAA,CAAA,WAAA;MAAA,WAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,QAAA,IAAA,QAAA,CAAA,WAAA,IAAA,MAAA,GAAA,EAAA;MAAA,EAAA,GAAA,OAAA,CAAA,iBAAA;MAAA,iBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAA;MAAA,EAAA,GAAA,OAAA,CAAA,2BAAA;MAAA,2BAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAA;MAAA,EAAA,GAAA,OAAA,CAAA,OAAA;MAAA,OAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA;QAC5C,UAAK,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,OAAA,EAAA;MACL,KAAA,EAAA,KAAS;MACT,SAAA,EAAW,SAAA;MACX,WAAW,EAAA,WAAA;MACX,WAAA,EAAA,WAAiB;MACjB,iBAAA,EAAA,iBAA2B;MAC3B,2BAAO,EAAA,2BAAA;MACN,OAAA,EAAA;IAEH,CAAA,CAAA;QAIE,aAAW,GAAA,SAAA,CAAY,SAAU,EAAA;MAEjC,UAAM,CAAA,SAAc,GAAG,SAAK;MAM5B,IAGE,cAAW,GAAA,KAAW,CAAA,kBAAc,CAAA,SAAA,EAAA,UAAA,EAAA,aAAA,CAAA;UAGpC,UAAA,CAAA,WAAqB,KAAI,SAAA,IACzB,cAAU,CAAA,MAAA,GAAA,CAAe,IAEzB,SAAS,CAAC,eAAe,EAAC;QAC3B,SAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,CAAA,aAAA,EAAA,OAAA,CAAA;MAED;MACA,OAAA,cAAA;IAIF,CAAA;IACA,IAAI,eAAe,GAAC,SAAA,CAAA,EAAa;MAAA,OAAA,KAAA,CAAM,cAAA,CAAA,MAAA,CAAA,OAAA,CAAA;IAAA,CAAA;QACrC,CAAA,cAAe,CAAA,GAAG,CAAA,OAAA,EAAA,UAAA,MAAA,EAAA;MAElB,eAAW,EAAA;MACV,UAAA,CAAA,YAAA;QAAA,OAAA,OAAA,CAAA,MAAA,CAAA,MAAA,CAAA;MAAA,CAAA,CAAA;IAKH,CAAA,CAAA;QASI,OAAO,GAAA,IAAA,OAAW,CAAA,IAAA,CAAA,SAAA,CAAA,UAChB,CAAA,KAAW,CAAA,CAAK,gBACL,GAGX,IAAA,CAAA,UAAc,CAAA,oBACnB,CAAC,UAAA,CAAA,KAAA,EAAA,UAAA,CAAA,SAAA,EAAA,UAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,aAAA,CAAA,GAEF,aAAgB,CAAI,UAAC,CAAA,SAAiB,CAAA,CAAA;IAEtC,OAAO,CAAA,OAAQ,CAAA,IAAA,CAAA,eAAA,EAAA,eAAA,CAAA;IAChB,OAAA,OAAA;EAEM,CAAP;EAAA,YAAA,CAAA,SA0JC,CAAA,cAAA,GAAA,UAAA,EAAA,EAAA;QAzJC,KAAA,GAAA,IAAW;IAOX,IAAM,WAAA,GAAA,EAAA,CAAA,WAA0B;MAAG,OAI9B,GAAA,EAAA,CAAA,OAAA;MAAA,EAAA,GAAA,EAAA,CAAA,UAAA;MAAA,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EAAA;MAAA,EAAA,GAAA,EAAA,CAAA,gBAAA;MAAA,gBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,UAAA,GAAA,YAAA,CAAA,gBAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA;MAAA,cAAA,GAAA,EAAA,CAAA,cAAA;IAEL,IAAI,mBAAS,GAAA,IAAA,GAAA,EAAA;QACX,OAAK,EAAA;UACH,CAAA,oBAAoB,CAAA,OAAI,CAAA,CAAO,OAAE,CAAA,UAAA,EAAA,EAAA,OAAA,EAAA;QAC/B,mBAAE,CAAA,GAAA,CAAA,OAAA,EAAA;UACF,EAAA,EAAA,EAAA;UACC,QAAA,EAAA,KAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,OAAA;QACF,CAAA,CAAA;MACJ,CAAA,CAAA;IAED;IAEA,IAAI,OAAA,GAAA,IAAa,GAAA;QACf,WAAW,EAAA;UACT,CAAA,KAAM,CAAA,KAAE,CAAA;QA+BR,MAAA,EAAA,WAAY;QASZ,UAAA,EAAA,UAAgB,IAAA,gBAAA,IAAA,KAAA;QAEhB,gBAAc,EAAA,gBAAQ;QACpB,cACE,EAAA,SAAA,CAAa,KAAA,EAAA,IAAA,EAAY,QAAS,EAAA;cAClC,EAAA,GAAK,KAAC,CAAA,OAAQ,YAAgB,SAAA,IAE5B,KAAI,CAAA,OAAA,CAAA,eAAA;cACN,EAAA,EAAI;gBAIF,cAAA,EAAA;cAEA,mBACE,CAAA,MAAA,CAAc,EAAC,CAAE,OAAM,CAAE;cAE3B,IAAI,MAAM,GAAA,cAAW,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,CAAA;kBAGnB,MAAM,KAAK,IAAC,EAAA;gBACb,MAAA,GAAA,EAAA,CAAA,OAAA,EAAA;cAID;kBACE,MAAA,KAAW,KAAK,EAAA;gBACjB,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,MAAA,CAAA;cAID;cACD,OAAA,MAAA;YAED;gBAIE,cAAA,KAAmB,IAAI,EAAC;cACzB,mBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,OAAA,EAAA;gBAAA,EAAA,EAAA,EAAA;gBAAA,QAAA,EAAA,QAAA;gBAAA,IAAA,EAAA;cAAA,CAAA,CAAA;YACF;UACF;QACA;MACJ,CAAA,CAAA;IAED;QACE,mBAAmB,CAAC,IAAA,EAAA;MAAW,mBAAE,CAAE,OAAA,CAAQ,UAAA,EAAA,EAAA,OAAM,EAAA;QAC/C,IAAI,EAAA,GAAA,EAAwE,CAAA,EAAA;UAAA,QAAA,GAAA,EAAA,CAAA,QAAA;UAAA,IAAA,GAAA,EAAA,CAAA,IAAA;QAI5E,IAAI,MAAA;YACF,cAAW,EAAA;cACT,CAAA,IAAM,EAAA;YACN,IAAI,IAAC,GAAK,EAAG,CAAA,WAAA,CAAA;YACb,IAAI,CAAA,KAAG,EAAK;YACb,IAAA,GAAA,IAAA,CAAA,OAAA,EAAA;UACD;UACD,MAAA,GAAA,cAAA,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,CAAA;QAGD;YACE,CAAA,cAAY,IAAO,MAAG,KAAA,IAAA,EAAA;UACvB,MAAA,GAAA,EAAA,CAAA,OAAA,EAAA;QAED;YACE,MAAA,KAAW,KAAK,EAAA;UACjB,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,MAAA,CAAA;QAED;YACE,OAAK,CAAA,OAAA,CAAA,oBAA8B,CAAA,IAAA,CAAA,EAAA;UACpC,KAAA,CAAA,oBAAA,CAAA,OAAA,CAAA;QACA;MACJ,CAAA,CAAA;IAED;QAQE,gBAAW,EAAA;MACZ,IAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,gBAAA,CAAA;IAED;IACD,OAAA,OAAA;EAEO,CAAR;EAAA,YAAA,CAAA,SAoKC,CAAA,kBAAA,GAAA,UAAA,SAAA,EAAA,EAAA,EAAA,aAAA,EAAA;QAlKG,KAAK,GAAA,IAAA;IAcP,IAAM,KAAA,GAAA,EAAA,CAAA,KAAgB;MAAA,SAAG,GAAU,EAAA,CAAA,SAAa;MAAC,WAAA,GAAA,EAAA,CAAA,WAAA;MAAA,kBAAA,GAAA,EAAA,CAAA,kBAAA;MAAA,WAAA,GAAA,EAAA,CAAA,WAAA;MAAA,iBAAA,GAAA,EAAA,CAAA,iBAAA;MAAA,OAAA,GAAA,EAAA,CAAA,OAAA;MAAA,2BAAA,GAAA,EAAA,CAAA,2BAAA;IAEjD,IAAA,gBAAe,GAAA,SAAA,CAAA,aAAA;IACb,SAAA,CAAA,IAAU,CAAA;MACV,QAAA,EAAS,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA,QAAA;MACT,SAAA,EAAA,SAAa;MACZ,aAAA,EAAA;IAEH,CAAA,CAAA;IAEA,IAAM,SAAA,GAAA,SAAA,CAAA,EAAmB;MAAA,OACM,SAC7B,CAAA,OAAgE,CAAA,SAAA,CAAA;IAAA,CAAA;QAAhE,gBAAA,GAAA,SAAA,CAAA,IAAA,EAAA,aAAgB,EAAA;MAEhB,IAAM,aAAY,KAAM,KAAC,CAAA,EAAA;QAAA,aAAA,GAAA,SAAA,CAAA,aAAA,IAAA,aAAA,CAAA,OAAA;MAAA;MAEzB,IAAI,IAAA,GAAO,IAAA,CAAA,MAAA;UACP,OAAC,IACD,CAAC,iBAAiB,IACpB,CAAA,KAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,EAAA;QACD,qBAAA,CAAA,IAAA,CAAA,OAAA,CAAA;MAED;MAOA,IAAI,QAAQ,GAAA,SAAA,CAAK,IAAU,EAAA;QAAK,OAAE,UAAA,CAAA,EAAkB,CAAA,QAAE,CAAA;UAAA,IAAA,EAAA,IAAA;UAAA,OAAA,EAAA,wBAAA,CAAA,aAAA,CAAA;UAAA,aAAA,EAAA;QAAA,CAAA,EAAA,IAAA,CAAA,QAAA,GAAA,IAAA,GAAA;UAAA,OAAA,EAAA;QAAA,CAAA,CAAA,CAAA;MAAA,CAAA;UACpD,IAAA,IAAO,KAAK,CAAA,SAAU,CAAC,KAAA,CAAA,CAAA,kBAAa,EAAA;QAClC,OAAA,KAAQ,CAAA,UAAO,CAAA,YAAA,CAAA;UACf,QAAA,EAAA,KAAc;UACd,YAAO,EAAA;YAAA,IAAA,EAAA;UAAA,CAAA;UACP,OAAA,EAAS,OAAA;UACT,SAAA,EAAA,SAAA;UACC,sBAAa,EAAA;QACjB,CAAA,CAAA,CAAA,IAAA,CAAA,UAAA,QAAA,EAAA;UAAA,OAAA,QAAA,CAAA,QAAA,CAAA,IAAA,IAAA,KAAA,CAAA,CAAA;QAAA,CAAA,CAAA;MAMD;UAEE,WAAA,KAAa,MAAK,IAClB,aAAa,KAAK,aAClB,CAAA,OAAA,IACA,KAAA,CAAA,OAAO,CAAA,IAAS,CAAA,OAAQ,CAAA,EAAA;QACzB,OAAA,QAAA,CAAA,KAAA,CAAA,CAAA;MAED;MACA,OAAA,QAAA,CAAA,IAAA,CAAA;IAEF,CAAA;QAEE,kBAEe,GAAK,WAAa,KAAC,UAAO,GAAA,CAAA,GACvC,aAAA,KAAA,aAAuB,CAAA,OACtB,IACD,kBAA2B,KAAA,OAAA,GAAA,CAAA,GAEzB,CAAA;QAIF,eAAS,GAAA,SAAA,CAAA,EAAA;MAAA,OAAA,KAAA,CAAA,kBAAA,CAAA,SAAA,EAAA,kBAAA,EAAA;QACT,SAAO,EAAA,SAAA;QACP,OAAA,EAAA,OAAW;QACX,WAAW,EAAA,WAAA;QAPe,WAS5B,EAAA;MAEF,CAAA,CAAA;IAAM,CAAA;QAEJ,YAAO,GAAA,2BAA6B,IACpC,OAAA,gBAAqB,KAAA,QAAa,IAClC,gBAAA,KAAA,aAAyB,IAE3B,wBAAqB,CAAA,aAAA,CAAA;IACrB,QAAA,WAAQ;MAAC;MACP,KAAA,aAAa;QAAA;UAEb,IAAI,IAAI,GAAC,SAAU,EAAA;cACjB,IAAA,CAAA,QAAO,EAAA;YACL,OAAA,CACA,gBAAA,CAAA,IAAA,EAAA,SAAA,CAAA,SAAA,EAAA,CAAA,CACH;UAED;cACE,iBAAO,IAAA,YAAA,EAAA;YACL,OAAA,CACA,gBAAe,CAAE,IAAA,CAAA,EACjB,eAAA,EAAA,CACH;UAED;UACE,OAAA,CACA,eAAA,EAAA,CACH;QAED;MACE,KAAA,mBAAsB;QAAE;UAExB,IAAI,IAAI,GAAC,SAAQ,EAAI;cACnB,IAAA,CAAA,QAAO,IAAA,iBAAA,IAAA,YAAA,EAAA;YACL,OAAA,CACA,gBAAe,CAAE,IAAA,CAAA,EACjB,eAAA,EAAA,CACH;UAED;UACE,OAAA,CACA,eAAA,EAAA,CACH;QAED;MACE,KAAA,YAAO;QACL,OAAA,CACA,gBAAA,CAAA,SAAA,EAAA,EAAA,SAAA,CAAA,SAAA,EAAA,CAAA,CAEC;MACH,KAAA,cAAI;YACF,YAAO,EAAA;UACL,OAAA,CACA,gBAAe,CAAE,SAAA,EAAA,CAAA,EACjB,eAAA,EAAA,CACH;QAED;QAEF,OAAK,CAAA,eAAU,EAAA,CAAA;MACb,KAAA,UAAI;YACF,YAAO,EAAA;UAIL,OAAA,CACA,gBAAe,CAAE,SAAA,CAAA,OAAA,EAAA,CAAA,EACjB,eAAA,EAAA,CACH;QAED;QAEF,OAAK,CAAA,eAAS,EAAA,CAAA;MACZ,KAAA,SAAU;QACX,OAAA,EAAA;IAAA;EAGK,CAAR;EACE,YAAI,CAAA,SAAY,CAAA,QAAK,GAAQ,UAAW,OAAG,EAAA;QACzC,OAAK,IAAA,CAAO,IAAI,CAAC,OAAO,CAAA,GAAE,CAAA,OAAI,CAAA,EAAS;MACxC,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,IAAA,SAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;IACD;IACD,OAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA,CAAA;EAEO,CAAR;EAAuB,YAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAY,OAAA,EAAA;IACjC,IAAM,OAAA,KAAU,KAAO,CAAC,EAAA;MAAA,OAAW,GAAA,CAAA,CAAA;IAAA;IACnC,IAAA,UAAA,GAAA,IAAA,CAAA,UACK,CAAA,cACH,CAAA,OAAA,CAAA;IAEH,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA;MAAA,eAAA,EAAA,IAAA,CAAA;IAAA,CAAA,CAAA;EACH,CAAA;EAAC,OAAA,YAAA","sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport {\n  isExecutionPatchIncrementalResult,\n  isExecutionPatchResult,\n} from '../utilities/common/incrementalResult';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  getGraphQLErrorsFromResult,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesArray,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { mergeIncrementalData } from '../utilities/common/incrementalResult';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\ntype DefaultOptions = import(\"./ApolloClient\").DefaultOptions;\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables extends OperationVariables,\n    TContext extends Record<string, any>,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    const {\n      document,\n      hasClientExports,\n    } = this.transform(mutation);\n    mutation = this.cache.transformForLink(document);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: getGraphQLErrorsFromResult(result),\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // Since mutations might receive multiple payloads from the\n          // ApolloLink chain (e.g. when used with @defer),\n          // we resolve with a SingleExecutionResult or after the final\n          // ExecutionPatchResult has arrived and we have assembled the\n          // multipart response into a single result.\n          if (!('hasNext' in storeResult) || storeResult.hasNext === false) {\n            resolve(storeResult);\n          }\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: 'ROOT_MUTATION',\n          query: mutation.document,\n          variables: mutation.variables,\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        const diff = cache.diff<TData>({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.transform(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true,\n        });\n        let mergedData;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== 'undefined') {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          (result as FetchResult).data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: 'ROOT_MUTATION',\n            query: mutation.document,\n            variables: mutation.variables,\n          })\n        }\n      }\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          const isFinalResult =\n            !isExecutionPatchResult(result) ||\n            (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result as FetchResult, data: diff.result };\n                if ('incremental' in result) {\n                  delete result.incremental;\n                }\n                if ('hasNext' in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables,\n              });\n            }\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const noConnection = removeConnectionDirectiveFromDocument(transformed);\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = noConnection && this.localState.serverQuery(noConnection);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables extends OperationVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.beforeNext(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(\n      // Use same document originally produced by this.cache.transformDocument.\n      this.transform(queryInfo.document!).document\n    );\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const graphQLErrors = getGraphQLErrorsFromResult(result);\n        const hasErrors = graphQLErrors.length > 0;\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors,\n            }));\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars extends OperationVariables>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = defaults && defaults.fetchPolicy || \"cache-first\",\n      errorPolicy = defaults && defaults.errorPolicy || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const concastSources = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        concastSources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return concastSources;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, reason => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars extends OperationVariables>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesArray<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (\n        errorPolicy === 'none' &&\n        networkStatus === NetworkStatus.refetch &&\n        Array.isArray(diff.missing)\n      ) {\n        return fromData(void 0);\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () => this.getResultsFromLink<TData, TVars>(\n      queryInfo,\n      cacheWriteBehavior,\n      {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      },\n    );\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}