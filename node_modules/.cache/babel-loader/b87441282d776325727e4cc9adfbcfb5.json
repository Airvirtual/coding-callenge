{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\nimport { mergeOptions } from \"../utilities/index.js\";\nexport { mergeOptions };\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var uri = options.uri,\n      credentials = options.credentials,\n      headers = options.headers,\n      cache = options.cache,\n      _a = options.ssrMode,\n      ssrMode = _a === void 0 ? false : _a,\n      _b = options.ssrForceFetchDelay,\n      ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n      _c = options.connectToDevTools,\n      connectToDevTools = _c === void 0 ? typeof window === 'object' && !window.__APOLLO_CLIENT__ && __DEV__ : _c,\n      _d = options.queryDeduplication,\n      queryDeduplication = _d === void 0 ? true : _d,\n      defaultOptions = options.defaultOptions,\n      _e = options.assumeImmutableResults,\n      assumeImmutableResults = _e === void 0 ? false : _e,\n      resolvers = options.resolvers,\n      typeDefs = options.typeDefs,\n      fragmentMatcher = options.fragmentMatcher,\n      clientAwarenessName = options.name,\n      clientAwarenessVersion = options.version;\n    var link = options.link;\n    if (!link) {\n      link = uri ? new HttpLink({\n        uri: uri,\n        credentials: credentials,\n        headers: headers\n      }) : ApolloLink.empty();\n    }\n    if (!cache) {\n      throw __DEV__ ? new InvariantError(\"To initialize Apollo Client, you must specify a 'cache' property \" + \"in the options object. \\n\" + \"For more information, please visit: https://go.apollo.dev/c/docs\") : new InvariantError(9);\n    }\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    if (connectToDevTools && typeof window === 'object') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    if (!hasSuggestedDevtools && connectToDevTools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (typeof window !== 'undefined' && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n        var nav = window.navigator;\n        var ua = nav && nav.userAgent;\n        var url = void 0;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" + \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          __DEV__ && invariant.log(\"Download the Apollo DevTools for a better development \" + \"experience: \" + url);\n        }\n      }\n    }\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: connectToDevTools ? function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.getQueryStore(),\n              mutations: _this.queryManager.mutationStore || {}\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      } : void 0\n    });\n  }\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.watchQuery(options);\n  };\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n    __DEV__ ? invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.') : invariant(options.fetchPolicy !== 'cache-and-network', 10);\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.query(options);\n  };\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate(options);\n  };\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readQuery(options, optimistic);\n  };\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readFragment(options, optimistic);\n  };\n  ApolloClient.prototype.writeQuery = function (options) {\n    var ref = this.cache.writeQuery(options);\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n    return ref;\n  };\n  ApolloClient.prototype.writeFragment = function (options) {\n    var ref = this.cache.writeFragment(options);\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n    return ref;\n  };\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: false\n      });\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore({\n        discardWatches: true\n      });\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n  ApolloClient.prototype.refetchQueries = function (options) {\n    var map = this.queryManager.refetchQueries(options);\n    var queries = [];\n    var results = [];\n    map.forEach(function (result, obsQuery) {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n    var result = Promise.all(results);\n    result.queries = queries;\n    result.results = results;\n    result.catch(function (error) {\n      __DEV__ && invariant.debug(\"In client.refetchQueries, Promise.all promise rejected with error \".concat(error));\n    });\n    return result;\n  };\n  ApolloClient.prototype.getObservableQueries = function (include) {\n    if (include === void 0) {\n      include = \"active\";\n    }\n    return this.queryManager.getObservableQueries(include);\n  };\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n  ApolloClient.prototype.setLink = function (newLink) {\n    this.link = this.queryManager.link = newLink;\n  };\n  return ApolloClient;\n}();\nexport { ApolloClient };","map":{"version":3,"sources":["../../src/core/ApolloClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { ExecutionResult, DocumentNode } from 'graphql';\n\nimport { ApolloLink, FetchResult, GraphQLRequest, execute } from '../link/core';\nimport { ApolloCache, DataProxy, Reference } from '../cache';\nimport { Observable } from '../utilities';\nimport { version } from '../version';\nimport { HttpLink, UriFunction } from '../link/http';\n\nimport { QueryManager } from './QueryManager';\nimport { ObservableQuery } from './ObservableQuery';\n\nimport {\n  ApolloQueryResult,\n  DefaultContext,\n  OperationVariables,\n  Resolvers,\n  RefetchQueriesOptions,\n  RefetchQueriesResult,\n  InternalRefetchQueriesResult,\n  RefetchQueriesInclude,\n} from './types';\n\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  SubscriptionOptions,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\n\nimport {\n  LocalState,\n  FragmentMatcher,\n} from './LocalState';\n\nexport interface DefaultOptions {\n  watchQuery?: Partial<WatchQueryOptions<any, any>>;\n  query?: Partial<QueryOptions<any, any>>;\n  mutate?: Partial<MutationOptions<any, any, any>>;\n}\n\nlet hasSuggestedDevtools = false;\n\nexport type ApolloClientOptions<TCacheShape> = {\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: Record<string, string>;\n  link?: ApolloLink;\n  cache: ApolloCache<TCacheShape>;\n  ssrForceFetchDelay?: number;\n  ssrMode?: boolean;\n  connectToDevTools?: boolean;\n  queryDeduplication?: boolean;\n  defaultOptions?: DefaultOptions;\n  assumeImmutableResults?: boolean;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: FragmentMatcher;\n  name?: string;\n  version?: string;\n};\n\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities\";\nexport { mergeOptions }\n\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over a {@link NetworkInterface} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nexport class ApolloClient<TCacheShape> implements DataProxy {\n  public link: ApolloLink;\n  public cache: ApolloCache<TCacheShape>;\n  public disableNetworkFetches: boolean;\n  public version: string;\n  public queryDeduplication: boolean;\n  public defaultOptions: DefaultOptions;\n  public readonly typeDefs: ApolloClientOptions<TCacheShape>['typeDefs'];\n\n  private queryManager: QueryManager<TCacheShape>;\n  private devToolsHookCb: Function;\n  private resetStoreCallbacks: Array<() => Promise<any>> = [];\n  private clearStoreCallbacks: Array<() => Promise<any>> = [];\n  private localState: LocalState<TCacheShape>;\n\n  /**\n   * Constructs an instance of {@link ApolloClient}.\n   *\n   * @param uri The GraphQL endpoint that Apollo Client will connect to. If\n   *            `link` is configured, this option is ignored.\n   * @param link The {@link ApolloLink} over which GraphQL documents will be resolved into a response.\n   *\n   * @param cache The initial cache to use in the data store.\n   *\n   * @param ssrMode Determines whether this is being run in Server Side Rendering (SSR) mode.\n   *\n   * @param ssrForceFetchDelay Determines the time interval before we force fetch queries for a\n   * server side render.\n   *\n   * @param queryDeduplication If set to false, a query will still be sent to the server even if a query\n   * with identical parameters (query, variables, operationName) is already in flight.\n   *\n   * @param defaultOptions Used to set application wide defaults for the\n   *                       options supplied to `watchQuery`, `query`, or\n   *                       `mutate`.\n   *\n   * @param assumeImmutableResults When this option is true, the client will assume results\n   *                               read from the cache are never mutated by application code,\n   *                               which enables substantial performance optimizations.\n   *\n   * @param name A custom name that can be used to identify this client, when\n   *             using Apollo client awareness features. E.g. \"iOS\".\n   *\n   * @param version A custom version that can be used to identify this client,\n   *                when using Apollo client awareness features. This is the\n   *                version of your client, which you may want to increment on\n   *                new builds. This is NOT the version of Apollo Client that\n   *                you are using.\n   */\n  constructor(options: ApolloClientOptions<TCacheShape>) {\n    const {\n      uri,\n      credentials,\n      headers,\n      cache,\n      ssrMode = false,\n      ssrForceFetchDelay = 0,\n      connectToDevTools =\n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        typeof window === 'object' &&\n        !(window as any).__APOLLO_CLIENT__ &&\n        __DEV__,\n      queryDeduplication = true,\n      defaultOptions,\n      assumeImmutableResults = false,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n      name: clientAwarenessName,\n      version: clientAwarenessVersion,\n    } = options;\n\n    let { link } = options;\n\n    if (!link) {\n      link = uri\n        ? new HttpLink({ uri, credentials, headers })\n        : ApolloLink.empty();\n    }\n\n    if (!cache) {\n      throw new InvariantError(\n        \"To initialize Apollo Client, you must specify a 'cache' property \" +\n        \"in the options object. \\n\" +\n        \"For more information, please visit: https://go.apollo.dev/c/docs\"\n      );\n    }\n\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.typeDefs = typeDefs;\n\n    if (ssrForceFetchDelay) {\n      setTimeout(\n        () => (this.disableNetworkFetches = false),\n        ssrForceFetchDelay,\n      );\n    }\n\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n\n    if (connectToDevTools && typeof window === 'object') {\n      (window as any).__APOLLO_CLIENT__ = this;\n    }\n\n    /**\n     * Suggest installing the devtools for developers who don't have them\n     */\n    if (!hasSuggestedDevtools && connectToDevTools && __DEV__) {\n      hasSuggestedDevtools = true;\n      if (\n        typeof window !== 'undefined' &&\n        window.document &&\n        window.top === window.self &&\n        !(window as any).__APOLLO_DEVTOOLS_GLOBAL_HOOK__\n      ) {\n        const nav = window.navigator;\n        const ua = nav && nav.userAgent;\n        let url: string | undefined;\n        if (typeof ua === \"string\") {\n          if (ua.indexOf(\"Chrome/\") > -1) {\n            url = \"https://chrome.google.com/webstore/detail/\" +\n              \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n          } else if (ua.indexOf(\"Firefox/\") > -1) {\n            url = \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n          }\n        }\n        if (url) {\n          invariant.log(\n            \"Download the Apollo DevTools for a better development \" +\n              \"experience: \" + url\n          );\n        }\n      }\n    }\n\n    this.version = version;\n\n    this.localState = new LocalState({\n      cache,\n      client: this,\n      resolvers,\n      fragmentMatcher,\n    });\n\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      defaultOptions: this.defaultOptions,\n      queryDeduplication,\n      ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName!,\n        version: clientAwarenessVersion!,\n      },\n      localState: this.localState,\n      assumeImmutableResults,\n      onBroadcast: connectToDevTools ? () => {\n        if (this.devToolsHookCb) {\n          this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: this.queryManager.getQueryStore(),\n              mutations: this.queryManager.mutationStore || {},\n            },\n            dataWithOptimisticResults: this.cache.extract(true),\n          });\n        }\n      } : void 0,\n    });\n  }\n\n  /**\n   * Call this method to terminate any active client processes, making it safe\n   * to dispose of this `ApolloClient` instance.\n   */\n  public stop() {\n    this.queryManager.stop();\n  }\n\n  /**\n   * This watches the cache store of the query according to the options specified and\n   * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n   * receive updated results through a GraphQL observer when the cache store changes.\n   *\n   * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n   * it uses Apollo's store in order to reactively deliver updates to your query results.\n   *\n   * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n   * first and last name and this person has a particular object identifier, provided by\n   * dataIdFromObject. Later, a different query fetches that same person's\n   * first and last name and the first name has now changed. Then, any observers associated\n   * with the results of the first query will be updated with a new result object.\n   *\n   * Note that if the cache does not change, the subscriber will *not* be notified.\n   *\n   * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n   * a description of store reactivity.\n   */\n  public watchQuery<T = any, TVariables extends OperationVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    if (this.defaultOptions.watchQuery) {\n      options = mergeOptions(this.defaultOptions.watchQuery, options);\n    }\n\n    // XXX Overwriting options is probably not the best way to do this long term...\n    if (\n      this.disableNetworkFetches &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.watchQuery<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single query according to the options specified and\n   * returns a {@link Promise} which is either resolved with the resulting data\n   * or rejected with an error.\n   *\n   * @param options An object of type {@link QueryOptions} that allows us to\n   * describe how this query should be treated e.g. whether it should hit the\n   * server at all or just resolve from the cache, etc.\n   */\n  public query<T = any, TVariables extends OperationVariables = OperationVariables>(\n    options: QueryOptions<TVariables, T>,\n  ): Promise<ApolloQueryResult<T>> {\n    if (this.defaultOptions.query) {\n      options = mergeOptions(this.defaultOptions.query, options);\n    }\n\n    invariant(\n      (options.fetchPolicy as WatchQueryFetchPolicy) !== 'cache-and-network',\n      'The cache-and-network fetchPolicy does not work with client.query, because ' +\n      'client.query can only return a single result. Please use client.watchQuery ' +\n      'to receive multiple results from the cache and the network, or consider ' +\n      'using a different fetchPolicy, such as cache-first or network-only.'\n    );\n\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = { ...options, fetchPolicy: 'cache-first' };\n    }\n\n    return this.queryManager.query<T, TVariables>(options);\n  }\n\n  /**\n   * This resolves a single mutation according to the options specified and returns a\n   * {@link Promise} which is either resolved with the resulting data or rejected with an\n   * error.\n   *\n   * It takes options as an object with the following keys and values:\n   */\n  public mutate<\n    TData = any,\n    TVariables extends OperationVariables = OperationVariables,\n    TContext extends Record<string, any> = DefaultContext,\n    TCache extends ApolloCache<any> = ApolloCache<any>\n  >(\n    options: MutationOptions<TData, TVariables, TContext>,\n  ): Promise<FetchResult<TData>> {\n    if (this.defaultOptions.mutate) {\n      options = mergeOptions(this.defaultOptions.mutate, options);\n    }\n    return this.queryManager.mutate<TData, TVariables, TContext, TCache>(options);\n  }\n\n  /**\n   * This subscribes to a graphql subscription according to the options specified and returns an\n   * {@link Observable} which either emits received data or an error.\n   */\n  public subscribe<T = any, TVariables extends OperationVariables = OperationVariables>(\n    options: SubscriptionOptions<TVariables, T>,\n  ): Observable<FetchResult<T>> {\n    return this.queryManager.startGraphQLSubscription<T>(options);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL query without making a network request. This method will start at\n   * the root query. To start at a specific id returned by `dataIdFromObject`\n   * use `readFragment`.\n   *\n   * @param optimistic Set to `true` to allow `readQuery` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readQuery<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Query<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readQuery<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Tries to read some data from the store in the shape of the provided\n   * GraphQL fragment without making a network request. This method will read a\n   * GraphQL fragment from any arbitrary id that is currently cached, unlike\n   * `readQuery` which will only read from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are reading. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   *\n   * @param optimistic Set to `true` to allow `readFragment` to return\n   * optimistic results. Is `false` by default.\n   */\n  public readFragment<T = any, TVariables = OperationVariables>(\n    options: DataProxy.Fragment<TVariables, T>,\n    optimistic: boolean = false,\n  ): T | null {\n    return this.cache.readFragment<T, TVariables>(options, optimistic);\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL query directly to\n   * the store. This method will start at the root query. To start at a\n   * specific id returned by `dataIdFromObject` then use `writeFragment`.\n   */\n  public writeQuery<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteQueryOptions<TData, TVariables>,\n  ): Reference | undefined {\n    const ref = this.cache.writeQuery<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  /**\n   * Writes some data in the shape of the provided GraphQL fragment directly to\n   * the store. This method will write to a GraphQL fragment from any arbitrary\n   * id that is currently cached, unlike `writeQuery` which will only write\n   * from the root query.\n   *\n   * You must pass in a GraphQL document with a single fragment or a document\n   * with multiple fragments that represent what you are writing. If you pass\n   * in a document with multiple fragments then you must also specify a\n   * `fragmentName`.\n   */\n  public writeFragment<TData = any, TVariables = OperationVariables>(\n    options: DataProxy.WriteFragmentOptions<TData, TVariables>,\n  ): Reference | undefined {\n    const ref = this.cache.writeFragment<TData, TVariables>(options);\n\n    if (options.broadcast !== false) {\n      this.queryManager.broadcastQueries();\n    }\n\n    return ref;\n  }\n\n  public __actionHookForDevTools(cb: () => any) {\n    this.devToolsHookCb = cb;\n  }\n\n  public __requestRaw(payload: GraphQLRequest): Observable<ExecutionResult> {\n    return execute(this.link, payload);\n  }\n\n  /**\n   * Resets your entire store by clearing out your cache and then re-executing\n   * all of your active queries. This makes it so that you may guarantee that\n   * there is no data left in your store from a time before you called this\n   * method.\n   *\n   * `resetStore()` is useful when your user just logged out. You’ve removed the\n   * user session, and you now want to make sure that any references to data you\n   * might have fetched while the user session was active is gone.\n   *\n   * It is important to remember that `resetStore()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public resetStore(): Promise<ApolloQueryResult<any>[] | null> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: false,\n      }))\n      .then(() => Promise.all(this.resetStoreCallbacks.map(fn => fn())))\n      .then(() => this.reFetchObservableQueries());\n  }\n\n  /**\n   * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n   * not refetch any active queries.\n   */\n  public clearStore(): Promise<any[]> {\n    return Promise.resolve()\n      .then(() => this.queryManager.clearStore({\n        discardWatches: true,\n      }))\n      .then(() => Promise.all(this.clearStoreCallbacks.map(fn => fn())));\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * reset. `onResetStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onResetStore(cb: () => Promise<any>): () => void {\n    this.resetStoreCallbacks.push(cb);\n    return () => {\n      this.resetStoreCallbacks = this.resetStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Allows callbacks to be registered that are executed when the store is\n   * cleared. `onClearStore` returns an unsubscribe function that can be used\n   * to remove registered callbacks.\n   */\n  public onClearStore(cb: () => Promise<any>): () => void {\n    this.clearStoreCallbacks.push(cb);\n    return () => {\n      this.clearStoreCallbacks = this.clearStoreCallbacks.filter(c => c !== cb);\n    };\n  }\n\n  /**\n   * Refetches all of your active queries.\n   *\n   * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n   *\n   * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n   */\n  public reFetchObservableQueries(\n    includeStandby?: boolean,\n  ): Promise<ApolloQueryResult<any>[]> {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  }\n\n  /**\n   * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n   *\n   * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n   *\n   * It is important to remember that `refetchQueries()` *will* refetch specified active\n   * queries. This means that any components that might be mounted will execute\n   * their queries again using your network interface. If you do not want to\n   * re-execute any queries then you should make sure to stop watching any\n   * active queries.\n   */\n  public refetchQueries<\n    TCache extends ApolloCache<any> = ApolloCache<TCacheShape>,\n    TResult = Promise<ApolloQueryResult<any>>,\n  >(\n    options: RefetchQueriesOptions<TCache, TResult>,\n  ): RefetchQueriesResult<TResult> {\n    const map = this.queryManager.refetchQueries(options);\n    const queries: ObservableQuery<any>[] = [];\n    const results: InternalRefetchQueriesResult<TResult>[] = [];\n\n    map.forEach((result, obsQuery) => {\n      queries.push(obsQuery);\n      results.push(result);\n    });\n\n    const result = Promise.all<TResult>(\n      results as TResult[]\n    ) as RefetchQueriesResult<TResult>;\n\n    // In case you need the raw results immediately, without awaiting\n    // Promise.all(results):\n    result.queries = queries;\n    result.results = results;\n\n    // If you decide to ignore the result Promise because you're using\n    // result.queries and result.results instead, you shouldn't have to worry\n    // about preventing uncaught rejections for the Promise.all result.\n    result.catch(error => {\n      invariant.debug(`In client.refetchQueries, Promise.all promise rejected with error ${error}`);\n    });\n\n    return result;\n  }\n\n  /**\n   * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n   * query ID strings. An \"active\" query is one that has observers and a\n   * `fetchPolicy` other than \"standby\" or \"cache-only\". You can include all\n   * `ObservableQuery` objects (including the inactive ones) by passing \"all\"\n   * instead of \"active\", or you can include just a subset of active queries by\n   * passing an array of query names or DocumentNode objects.\n   */\n  public getObservableQueries(\n    include: RefetchQueriesInclude = \"active\",\n  ): Map<string, ObservableQuery<any>> {\n    return this.queryManager.getObservableQueries(include);\n  }\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public extract(optimistic?: boolean): TCacheShape {\n    return this.cache.extract(optimistic);\n  }\n\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public restore(serializedState: TCacheShape): ApolloCache<TCacheShape> {\n    return this.cache.restore(serializedState);\n  }\n\n  /**\n   * Add additional local resolvers.\n   */\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.addResolvers(resolvers);\n  }\n\n  /**\n   * Set (override existing) local resolvers.\n   */\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.localState.setResolvers(resolvers);\n  }\n\n  /**\n   * Get all registered local resolvers.\n   */\n  public getResolvers() {\n    return this.localState.getResolvers();\n  }\n\n  /**\n   * Set a custom local state fragment matcher.\n   */\n  public setLocalStateFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  }\n\n  /**\n   * Define a new ApolloLink (or link chain) that Apollo Client will use.\n   */\n  public setLink(newLink: ApolloLink) {\n    this.link = this.queryManager.link = newLink;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}