{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      _f = options.initialFetchPolicy,\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function () {\n      return this.queryManager.transform(this.options.query).document;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'no-cache' || fetchPolicy === 'standby' || this.queryManager.transform(this.options.query).hasForcedResolvers) {} else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        delete result.partial;\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (__DEV__ && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    return !this.last || !equal(this.last.result, newResult) || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    var qid = this.queryManager.generateQueryId();\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);\n  };\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 13);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only'\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n      ;\n    };\n    var poll = function () {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    this.last = __assign(__assign({}, this.last), {\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    });\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    if (!useDisposableConcast) {\n      this.updatePolling();\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    var variables = options.variables && __assign({}, options.variables);\n    var concast = this.fetch(options, newNetworkStatus);\n    var observer = {\n      next: function (result) {\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        _this.reportError(error, variables);\n      }\n    };\n    if (!useDisposableConcast) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast.promise;\n  };\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function () {\n        this.nextFetchPolicy = nextFetchPolicy;\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (__DEV__ && missing) {\n    __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n  }\n}","map":{"version":3,"sources":["../../src/core/ObservableQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../utilities/globals';\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    // This transform is heavily cached, so it should not be expensive to\n    // transform the same this.options.query document repeatedly.\n    return this.queryManager.transform(this.options.query).document;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache' ||\n      fetchPolicy === 'standby' ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    return (\n      !this.last ||\n      !equal(this.last.result, newResult) ||\n      (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * This is for *internal* use only. Most users should instead use `refetch`\n   * in order to be properly notified of results even when they come from cache.\n   *\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. If you want to force new results, use `refetch`.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    const variables = options.variables && { ...options.variables };\n    const concast = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast.promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}