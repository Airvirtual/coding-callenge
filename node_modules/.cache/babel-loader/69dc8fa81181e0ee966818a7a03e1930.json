{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { InvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n    _this.link = link;\n    return _this;\n  }\n  return LinkError;\n}(Error);\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      __DEV__ && invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n      return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw __DEV__ ? new InvariantError('request is not implemented') : new InvariantError(22);\n  };\n  ApolloLink.prototype.onError = function (error, observer) {\n    if (observer && observer.error) {\n      observer.error(error);\n      return false;\n    }\n    throw error;\n  };\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n  return ApolloLink;\n}();\nexport { ApolloLink };","map":{"version":3,"sources":["../../../src/link/core/ApolloLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvariantError, invariant } from '../../utilities/globals';\n\nimport { Observable, Observer } from '../../utilities';\nimport {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest\n} from './types';\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from '../utils';\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nclass LinkError extends Error {\n  public link?: ApolloLink;\n  constructor(message?: string, link?: ApolloLink) {\n    super(message);\n    this.link = link;\n  }\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(operation => {\n        return test(operation)\n          ? leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation)\n          ? leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest,\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation)),\n        ),\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler,\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        new LinkError(\n          `You are calling concat on a terminating link, which will have no effect`,\n          firstLink,\n        ),\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        operation =>\n          firstLink.request(\n            operation,\n            op => nextLink.request(op) || Observable.of(),\n          ) || Observable.of(),\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, op => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler,\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    throw new InvariantError('request is not implemented');\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>,\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}