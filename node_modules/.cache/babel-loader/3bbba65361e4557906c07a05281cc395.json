{"ast":null,"code":"// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nvar defaultMakeData = function () {\n  return Object.create(null);\n};\n// Useful for processing arguments objects as well as arrays.\nvar _a = Array.prototype,\n  forEach = _a.forEach,\n  slice = _a.slice;\nvar Trie = /** @class */function () {\n  function Trie(weakness, makeData) {\n    if (weakness === void 0) {\n      weakness = true;\n    }\n    if (makeData === void 0) {\n      makeData = defaultMakeData;\n    }\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n  Trie.prototype.lookup = function () {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n    return this.lookupArray(array);\n  };\n  Trie.prototype.lookupArray = function (array) {\n    var node = this;\n    forEach.call(array, function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  };\n  Trie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new Trie(this.weakness, this.makeData));\n    return child;\n  };\n  return Trie;\n}();\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}\nexport { Trie };","map":{"version":3,"sources":["../src/trie.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,IAAM,eAAe,GAAG,SAAA,CAAA,EAAM;EAAA,OAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAlB;AAAA,CAAmB;AAEjD;AACM,IAAA,EAAA,GAAqB,KAAK,CAAC,SAAS;EAAlC,OAAO,GAAA,EAAA,CAAA,OAAA;EAAE,KAAK,GAAA,EAAA,CAAA,KAAoB;AAE1C,IAAA,IAAA,GAAA,aAAA,YAAA;EAQE,SACU,IAAA,CAAA,QAAe,EACf,QAAkD,EAAA;IADlD,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;MAAA,QAAe,GAAA,IAAA;IAAA;IACf,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;MAAA,QAAkD,GAAA,eAAA;IAAA;IADlD,IAAQ,CAAA,QAAA,GAAR,QAAQ;IACR,IAAQ,CAAA,QAAA,GAAR,QAAQ;EACd;EAEG,IAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IAA+B,IAAW,KAAA,GAAA,EAAA;SAAX,IAAW,EAAA,GAAA,CAAA,EAAX,EAAW,GAAA,SAAA,CAAA,MAAA,EAAX,EAAW,EAAA,EAAA;MAAX,KAAW,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACxC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;GAC/B;EAEM,IAAW,CAAA,SAAA,CAAA,WAAA,GAAlB,UAAiD,KAAQ,EAAA;IACvD,IAAI,IAAI,GAAe,IAAI;IAC3B,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,UAAA,GAAG,EAAA;MAAI,OAAA,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAA5B;IAAA,CAA6B,CAAC;IACzD,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;GACnE;EAEO,IAAY,CAAA,SAAA,CAAA,YAAA,GAApB,UAAqB,GAAQ,EAAA;IAC3B,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,GACtC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,EAAmB,CAAC,GACzD,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAmB,CAAC;IAC7D,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACxB,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,IAAI,CAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9E,OAAO,KAAK;GACb;EACH,OAAC,IAAA;AAAD,CAAC,EAAA;AAED,SAAS,QAAQ,CAAC,KAAU,EAAA;EAC1B,QAAQ,OAAO,KAAK;IACpB,KAAK,QAAQ;MACX,IAAI,KAAK,KAAK,IAAI,EAAE;;IAEtB,KAAK,UAAU;MACb,OAAO,IAAI;EAAC;EAEd,OAAO,KAAK;AACd","sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}