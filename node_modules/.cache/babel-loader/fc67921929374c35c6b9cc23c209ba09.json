{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  var _a = useState({\n      loading: !(options === null || options === void 0 ? void 0 : options.skip),\n      error: void 0,\n      data: void 0,\n      variables: options === null || options === void 0 ? void 0 : options.variables\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      __DEV__ && invariant.warn(options.onData ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\" : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\");\n    }\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      __DEV__ && invariant.warn(options.onComplete ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\" : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\");\n    }\n  }\n  var _b = useState(function () {\n      if (options === null || options === void 0 ? void 0 : options.skip) {\n        return null;\n      }\n      return client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      });\n    }),\n    observable = _b[0],\n    setObservable = _b[1];\n  var canResetObservableRef = useRef(false);\n  useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n        setResult({\n          loading: false,\n          data: void 0,\n          error: error,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n      },\n      complete: function () {\n        var _a, _b;\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n          ref.current.options.onComplete();\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { invariant } from '../../utilities/globals'\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const hasIssuedDeprecationWarningRef = useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = useRef(false);\n  useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result\n          });\n        }\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n        ref.current.options?.onError?.(error);\n      },\n      complete() {\n        if (ref.current.options?.onComplete) {\n          ref.current.options.onComplete();\n        } else if (ref.current.options?.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}