{"ast":null,"code":"import { canUseAsyncIteratorSymbol } from \"./canUse.js\";\nexport function isNodeResponse(value) {\n  return !!value.body;\n}\nexport function isReadableStream(value) {\n  return !!value.getReader;\n}\nexport function isAsyncIterableIterator(value) {\n  return !!(canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\nexport function isStreamableBlob(value) {\n  return !!value.stream;\n}\nexport function isBlob(value) {\n  return !!value.arrayBuffer;\n}\nexport function isNodeReadableStream(value) {\n  return !!value.pipe;\n}","map":{"version":3,"sources":["../../../src/utilities/common/responseIterator.ts"],"names":[],"mappings":"AAEA,SAAS,yBAAyB,QAAQ,aAAW;AAErD,OAAM,SAAU,cAAc,CAAC,KAAU,EAAA;EACvC,OAAO,CAAC,CAAE,KAAsB,CAAC,IAAI;AACvC;AAEA,OAAM,SAAU,gBAAgB,CAAC,KAAU,EAAA;EACzC,OAAO,CAAC,CAAE,KAA6B,CAAC,SAAS;AACnD;AAEA,OAAM,SAAU,uBAAuB,CACrC,KAAU,EAAA;EAEV,OAAO,CAAC,EACN,yBAAyB,IACxB,KAAoC,CAAC,MAAM,CAAC,aAAa,CAAC,CAC5D;AACH;AAEA,OAAM,SAAU,gBAAgB,CAAC,KAAU,EAAA;EACzC,OAAO,CAAC,CAAE,KAAc,CAAC,MAAM;AACjC;AAEA,OAAM,SAAU,MAAM,CAAC,KAAU,EAAA;EAC/B,OAAO,CAAC,CAAE,KAAc,CAAC,WAAW;AACtC;AAEA,OAAM,SAAU,oBAAoB,CAAC,KAAU,EAAA;EAC7C,OAAO,CAAC,CAAE,KAA4B,CAAC,IAAI;AAC7C","sourcesContent":["import { Response as NodeResponse } from \"node-fetch\";\nimport { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"./canUse\";\n\nexport function isNodeResponse(value: any): value is NodeResponse {\n  return !!(value as NodeResponse).body;\n}\n\nexport function isReadableStream(value: any): value is ReadableStream<any> {\n  return !!(value as ReadableStream<any>).getReader;\n}\n\nexport function isAsyncIterableIterator(\n  value: any\n): value is AsyncIterableIterator<any> {\n  return !!(\n    canUseAsyncIteratorSymbol &&\n    (value as AsyncIterableIterator<any>)[Symbol.asyncIterator]\n  );\n}\n\nexport function isStreamableBlob(value: any): value is Blob {\n  return !!(value as Blob).stream;\n}\n\nexport function isBlob(value: any): value is Blob {\n  return !!(value as Blob).arrayBuffer;\n}\n\nexport function isNodeReadableStream(value: any): value is NodeReadableStream {\n  return !!(value as NodeReadableStream).pipe;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}