{"ast":null,"code":"import { __assign, __rest as __rest_1, __spreadArray } from \"tslib\";\nimport { __rest } from \"tslib\";\nimport { mergeDeep } from \"../common/mergeDeep.js\";\nexport function concatPagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n  return {\n    keyArgs: keyArgs,\n    merge: function (existing, incoming) {\n      return existing ? __spreadArray(__spreadArray([], existing, true), incoming, true) : incoming;\n    }\n  };\n}\nexport function offsetLimitPagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n  return {\n    keyArgs: keyArgs,\n    merge: function (existing, incoming, _a) {\n      var args = _a.args;\n      var merged = existing ? existing.slice(0) : [];\n      if (incoming) {\n        if (args) {\n          var _b = args.offset,\n            offset = _b === void 0 ? 0 : _b;\n          for (var i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          merged.push.apply(merged, incoming);\n        }\n      }\n      return merged;\n    }\n  };\n}\nexport function relayStylePagination(keyArgs) {\n  if (keyArgs === void 0) {\n    keyArgs = false;\n  }\n  return {\n    keyArgs: keyArgs,\n    read: function (existing, _a) {\n      var canRead = _a.canRead,\n        readField = _a.readField;\n      if (!existing) return existing;\n      var edges = [];\n      var firstEdgeCursor = \"\";\n      var lastEdgeCursor = \"\";\n      existing.edges.forEach(function (edge) {\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n      var _b = existing.pageInfo || {},\n        startCursor = _b.startCursor,\n        endCursor = _b.endCursor;\n      return __assign(__assign({}, getExtras(existing)), {\n        edges: edges,\n        pageInfo: __assign(__assign({}, existing.pageInfo), {\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor\n        })\n      });\n    },\n    merge: function (existing, incoming, _a) {\n      var args = _a.args,\n        isReference = _a.isReference,\n        readField = _a.readField;\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n      if (!incoming) {\n        return existing;\n      }\n      var incomingEdges = incoming.edges ? incoming.edges.map(function (edge) {\n        if (isReference(edge = __assign({}, edge))) {\n          edge.cursor = readField(\"cursor\", edge);\n        }\n        return edge;\n      }) : [];\n      if (incoming.pageInfo) {\n        var pageInfo_1 = incoming.pageInfo;\n        var startCursor = pageInfo_1.startCursor,\n          endCursor = pageInfo_1.endCursor;\n        var firstEdge = incomingEdges[0];\n        var lastEdge = incomingEdges[incomingEdges.length - 1];\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        var firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor\n            }\n          });\n        }\n        var lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor\n            }\n          });\n        }\n      }\n      var prefix = existing.edges;\n      var suffix = [];\n      if (args && args.after) {\n        var index = prefix.findIndex(function (edge) {\n          return edge.cursor === args.after;\n        });\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n        }\n      } else if (args && args.before) {\n        var index = prefix.findIndex(function (edge) {\n          return edge.cursor === args.before;\n        });\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        prefix = [];\n      }\n      var edges = __spreadArray(__spreadArray(__spreadArray([], prefix, true), incomingEdges, true), suffix, true);\n      var pageInfo = __assign(__assign({}, incoming.pageInfo), existing.pageInfo);\n      if (incoming.pageInfo) {\n        var _b = incoming.pageInfo,\n          hasPreviousPage = _b.hasPreviousPage,\n          hasNextPage = _b.hasNextPage,\n          startCursor = _b.startCursor,\n          endCursor = _b.endCursor,\n          extras = __rest_1(_b, [\"hasPreviousPage\", \"hasNextPage\", \"startCursor\", \"endCursor\"]);\n        Object.assign(pageInfo, extras);\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n      return __assign(__assign(__assign({}, getExtras(existing)), getExtras(incoming)), {\n        edges: edges,\n        pageInfo: pageInfo\n      });\n    }\n  };\n}\nvar getExtras = function (obj) {\n  return __rest(obj, notExtras);\n};\nvar notExtras = [\"edges\", \"pageInfo\"];\nfunction makeEmptyData() {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\"\n    }\n  };\n}","map":{"version":3,"sources":["../../../src/utilities/policies/pagination.ts"],"names":[],"mappings":"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","sourcesContent":["import { __rest } from \"tslib\";\n\nimport { FieldPolicy, Reference } from '../../cache';\nimport { mergeDeep } from '../common/mergeDeep';\n\ntype KeyArgs = FieldPolicy<any>[\"keyArgs\"];\n\n// A very basic pagination field policy that always concatenates new\n// results onto the existing array, without examining options.args.\nexport function concatPagination<T = Reference>(\n  keyArgs: KeyArgs = false,\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming) {\n      return existing ? [\n        ...existing,\n        ...incoming,\n      ] : incoming;\n    },\n  };\n}\n\n// A basic field policy that uses options.args.{offset,limit} to splice\n// the incoming data into the existing array. If your arguments are called\n// something different (like args.{start,count}), feel free to copy/paste\n// this implementation and make the appropriate changes.\nexport function offsetLimitPagination<T = Reference>(\n  keyArgs: KeyArgs = false,\n): FieldPolicy<T[]> {\n  return {\n    keyArgs,\n    merge(existing, incoming, { args }) {\n      const merged = existing ? existing.slice(0) : [];\n\n      if (incoming) {\n        if (args) {\n          // Assume an offset of 0 if args.offset omitted.\n          const { offset = 0 } = args;\n          for (let i = 0; i < incoming.length; ++i) {\n            merged[offset + i] = incoming[i];\n          }\n        } else {\n          // It's unusual (probably a mistake) for a paginated field not\n          // to receive any arguments, so you might prefer to throw an\n          // exception here, instead of recovering by appending incoming\n          // onto the existing array.\n          merged.push.apply(merged, incoming);\n        }\n      }\n\n      return merged;\n    },\n  };\n}\n\n// Whether TRelayEdge<TNode> is a normalized Reference or a non-normalized\n// object, it needs a .cursor property where the relayStylePagination\n// merge function can store cursor strings taken from pageInfo. Storing an\n// extra reference.cursor property should be safe, and is easier than\n// attempting to update the cursor field of the normalized StoreObject\n// that the reference refers to, or managing edge wrapper objects\n// (something I attempted in #7023, but abandoned because of #7088).\nexport type TRelayEdge<TNode> = {\n  cursor?: string;\n  node: TNode;\n} | (Reference & { cursor?: string });\n\nexport type TRelayPageInfo = {\n  hasPreviousPage: boolean;\n  hasNextPage: boolean;\n  startCursor: string;\n  endCursor: string;\n};\n\nexport type TExistingRelay<TNode> = Readonly<{\n  edges: TRelayEdge<TNode>[];\n  pageInfo: TRelayPageInfo;\n}>;\n\nexport type TIncomingRelay<TNode> = {\n  edges?: TRelayEdge<TNode>[];\n  pageInfo?: TRelayPageInfo;\n};\n\nexport type RelayFieldPolicy<TNode> = FieldPolicy<\n  TExistingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null,\n  TIncomingRelay<TNode> | null\n>;\n\n// As proof of the flexibility of field policies, this function generates\n// one that handles Relay-style pagination, without Apollo Client knowing\n// anything about connections, edges, cursors, or pageInfo objects.\nexport function relayStylePagination<TNode extends Reference = Reference>(\n  keyArgs: KeyArgs = false,\n): RelayFieldPolicy<TNode> {\n  return {\n    keyArgs,\n\n    read(existing, { canRead, readField }) {\n      if (!existing) return existing;\n\n      const edges: TRelayEdge<TNode>[] = [];\n      let firstEdgeCursor = \"\";\n      let lastEdgeCursor = \"\";\n      existing.edges.forEach(edge => {\n        // Edges themselves could be Reference objects, so it's important\n        // to use readField to access the edge.edge.node property.\n        if (canRead(readField(\"node\", edge))) {\n          edges.push(edge);\n          if (edge.cursor) {\n            firstEdgeCursor = firstEdgeCursor || edge.cursor || \"\";\n            lastEdgeCursor = edge.cursor || lastEdgeCursor;\n          }\n        }\n      });\n\n      const {\n        startCursor,\n        endCursor,\n      } = existing.pageInfo || {};\n\n      return {\n        // Some implementations return additional Connection fields, such\n        // as existing.totalCount. These fields are saved by the merge\n        // function, so the read function should also preserve them.\n        ...getExtras(existing),\n        edges,\n        pageInfo: {\n          ...existing.pageInfo,\n          // If existing.pageInfo.{start,end}Cursor are undefined or \"\", default\n          // to firstEdgeCursor and/or lastEdgeCursor.\n          startCursor: startCursor || firstEdgeCursor,\n          endCursor: endCursor || lastEdgeCursor,\n        },\n      };\n    },\n\n    merge(existing, incoming, { args, isReference, readField }) {\n      if (!existing) {\n        existing = makeEmptyData();\n      }\n\n      if (!incoming) {\n        return existing;\n      }\n\n      const incomingEdges = incoming.edges ? incoming.edges.map(edge => {\n        if (isReference(edge = { ...edge })) {\n          // In case edge is a Reference, we read out its cursor field and\n          // store it as an extra property of the Reference object.\n          edge.cursor = readField<string>(\"cursor\", edge);\n        }\n        return edge;\n      }) : [];\n\n      if (incoming.pageInfo) {\n        const { pageInfo } = incoming;\n        const { startCursor, endCursor } = pageInfo;\n        const firstEdge = incomingEdges[0];\n        const lastEdge = incomingEdges[incomingEdges.length - 1];\n        // In case we did not request the cursor field for edges in this\n        // query, we can still infer cursors from pageInfo.\n        if (firstEdge && startCursor) {\n          firstEdge.cursor = startCursor;\n        }\n        if (lastEdge && endCursor) {\n          lastEdge.cursor = endCursor;\n        }\n        // Cursors can also come from edges, so we default\n        // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.\n        const firstCursor = firstEdge && firstEdge.cursor;\n        if (firstCursor && !startCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              startCursor: firstCursor,\n            },\n          });\n        }\n        const lastCursor = lastEdge && lastEdge.cursor;\n        if (lastCursor && !endCursor) {\n          incoming = mergeDeep(incoming, {\n            pageInfo: {\n              endCursor: lastCursor,\n            },\n          });\n        }\n      }\n\n      let prefix = existing.edges;\n      let suffix: typeof prefix = [];\n\n      if (args && args.after) {\n        // This comparison does not need to use readField(\"cursor\", edge),\n        // because we stored the cursor field of any Reference edges as an\n        // extra property of the Reference object.\n        const index = prefix.findIndex(edge => edge.cursor === args.after);\n        if (index >= 0) {\n          prefix = prefix.slice(0, index + 1);\n          // suffix = []; // already true\n        }\n      } else if (args && args.before) {\n        const index = prefix.findIndex(edge => edge.cursor === args.before);\n        suffix = index < 0 ? prefix : prefix.slice(index);\n        prefix = [];\n      } else if (incoming.edges) {\n        // If we have neither args.after nor args.before, the incoming\n        // edges cannot be spliced into the existing edges, so they must\n        // replace the existing edges. See #6592 for a motivating example.\n        prefix = [];\n      }\n\n      const edges = [\n        ...prefix,\n        ...incomingEdges,\n        ...suffix,\n      ];\n\n      const pageInfo: TRelayPageInfo = {\n        // The ordering of these two ...spreads may be surprising, but it\n        // makes sense because we want to combine PageInfo properties with a\n        // preference for existing values, *unless* the existing values are\n        // overridden by the logic below, which is permitted only when the\n        // incoming page falls at the beginning or end of the data.\n        ...incoming.pageInfo,\n        ...existing.pageInfo,\n      };\n\n      if (incoming.pageInfo) {\n        const {\n          hasPreviousPage, hasNextPage,\n          startCursor, endCursor,\n          ...extras\n        } = incoming.pageInfo;\n\n        // If incoming.pageInfo had any extra non-standard properties,\n        // assume they should take precedence over any existing properties\n        // of the same name, regardless of where this page falls with\n        // respect to the existing data.\n        Object.assign(pageInfo, extras);\n\n        // Keep existing.pageInfo.has{Previous,Next}Page unless the\n        // placement of the incoming edges means incoming.hasPreviousPage\n        // or incoming.hasNextPage should become the new values for those\n        // properties in existing.pageInfo. Note that these updates are\n        // only permitted when the beginning or end of the incoming page\n        // coincides with the beginning or end of the existing data, as\n        // determined using prefix.length and suffix.length.\n        if (!prefix.length) {\n          if (void 0 !== hasPreviousPage) pageInfo.hasPreviousPage = hasPreviousPage;\n          if (void 0 !== startCursor) pageInfo.startCursor = startCursor;\n        }\n        if (!suffix.length) {\n          if (void 0 !== hasNextPage) pageInfo.hasNextPage = hasNextPage;\n          if (void 0 !== endCursor) pageInfo.endCursor = endCursor;\n        }\n      }\n\n      return {\n        ...getExtras(existing),\n        ...getExtras(incoming),\n        edges,\n        pageInfo,\n      };\n    },\n  };\n}\n\n// Returns any unrecognized properties of the given object.\nconst getExtras = (obj: Record<string, any>) => __rest(obj, notExtras);\nconst notExtras = [\"edges\", \"pageInfo\"];\n\nfunction makeEmptyData(): TExistingRelay<any> {\n  return {\n    edges: [],\n    pageInfo: {\n      hasPreviousPage: false,\n      hasNextPage: true,\n      startCursor: \"\",\n      endCursor: \"\",\n    },\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}