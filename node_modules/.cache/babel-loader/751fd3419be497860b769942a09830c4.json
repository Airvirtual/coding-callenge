{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind } from 'graphql';\nimport { wrap } from 'optimism';\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n;\nfunction execSelectionSetKeyArgs(options) {\n  return [options.selectionSet, options.objectOrReference, options.context, options.context.canonizeResults];\n}\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n    this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config)\n    });\n    this.canon = config.canon || new ObjectCanon();\n    this.executeSelectionSet = wrap(function (options) {\n      var _a;\n      var canonizeResults = options.context.canonizeResults;\n      var peekArgs = execSelectionSetKeyArgs(options);\n      peekArgs[3] = !canonizeResults;\n      var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n      if (other) {\n        if (canonizeResults) {\n          return __assign(__assign({}, other), {\n            result: _this.canon.admit(other.result)\n          });\n        }\n        return other;\n      }\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSelectionSetImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n          array = _a.array,\n          context = _a.context;\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n  }\n  StoreReader.prototype.resetCanon = function () {\n    this.canon = new ObjectCanon();\n  };\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n      query = _a.query,\n      _b = _a.rootId,\n      rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n      variables = _a.variables,\n      _c = _a.returnPartialData,\n      returnPartialData = _c === void 0 ? true : _c,\n      _d = _a.canonizeResults,\n      canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var rootRef = makeReference(rootId);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: __assign({\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: canonicalStringify(variables),\n        canonizeResults: canonizeResults\n      }, extractFragmentContext(query, this.config.fragments))\n    });\n    var missing;\n    if (execResult.missing) {\n      missing = [new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing: missing\n    };\n  };\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  };\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n    var selectionSet = _a.selectionSet,\n      objectOrReference = _a.objectOrReference,\n      enclosingRef = _a.enclosingRef,\n      context = _a.context;\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n      };\n    }\n    var variables = context.variables,\n      policies = context.policies,\n      store = context.store;\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n    var objectsToMerge = [];\n    var missing;\n    var missingMerger = new DeepMerger();\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n    function handleMissing(result, resultName) {\n      var _a;\n      if (result.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n      }\n      return result.result;\n    }\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a, _b;\n      if (!shouldInclude(selection, variables)) return;\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n          }\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef: enclosingRef,\n            context: context\n          }), resultName);\n        } else if (!selection.selectionSet) {\n          if (context.canonizeResults) {\n            fieldValue = _this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context: context\n          }), resultName);\n        }\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw __DEV__ ? new InvariantError(\"No fragment named \".concat(selection.name.value)) : new InvariantError(5);\n        }\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    var result = mergeDeepArray(objectsToMerge);\n    var finalResult = {\n      result: result,\n      missing: missing\n    };\n    var frozen = context.canonizeResults ? this.canon.admit(finalResult) : maybeDeepFreeze(finalResult);\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n    return frozen;\n  };\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n    var field = _a.field,\n      array = _a.array,\n      enclosingRef = _a.enclosingRef,\n      context = _a.context;\n    var missing;\n    var missingMerger = new DeepMerger();\n    function handleMissing(childResult, i) {\n      var _a;\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n      }\n      return childResult.result;\n    }\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n      if (isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          enclosingRef: enclosingRef,\n          context: context\n        }), i);\n      }\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context: context\n        }), i);\n      }\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n      return item;\n    });\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing: missing\n    };\n  };\n  return StoreReader;\n}();\nexport { StoreReader };\nfunction firstMissing(tree) {\n  try {\n    JSON.stringify(tree, function (_, value) {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (isNonNullObject(value)) {\n        __DEV__ ? invariant(!isReference(value), \"Missing selection set for object of type \".concat(getTypenameFromStoreObject(store, value), \" returned for query field \").concat(field.name.value)) : invariant(!isReference(value), 6);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/readFromStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  Kind,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getMainDefinition,\n  getQueryDefinition,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  DeepMerger,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n  FragmentMapFunction,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  InMemoryCacheConfig,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from './entityStore';\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError, MissingTree } from '../core/types/common';\nimport { canonicalStringify, ObjectCanon } from './object-canon';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n  fragments?: InMemoryCacheConfig[\"fragments\"];\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions,\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]>;\n\n  private config: {\n    cache: InMemoryCache,\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n    fragments?: InMemoryCacheConfig[\"fragments\"];\n  };\n\n  private knownResults = new (\n    canUseWeakMap ? WeakMap : Map\n  )<Record<string, any>, SelectionSetNode>();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon;\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon;\n\n    this.executeSelectionSet = wrap(options => {\n      const { canonizeResults } = options.context;\n\n      const peekArgs = execSelectionSetKeyArgs(options);\n\n      // Negate this boolean option so we can find out if we've already read\n      // this result using the other boolean value.\n      peekArgs[3] = !canonizeResults;\n\n      const other = this.executeSelectionSet.peek(...peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return {\n            ...other,\n            // If we previously read this result without canonizing it, we can\n            // reuse that result simply by canonizing it now.\n            result: this.canon.admit(other.result),\n          };\n        }\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            selectionSet,\n            isReference(parent) ? parent.__ref : parent,\n            context.varString,\n            canonizeResults,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey({ field, array, context }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            field,\n            array,\n            context.varString,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        ...extractFragmentContext(query, this.config.fragments),\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables,\n      )];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result),\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, { [resultName]: result.missing });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${\n                selection.name.value\n              }' on ${\n                isReference(objectOrReference)\n                  ? objectOrReference.__ref + \" object\"\n                  : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`\n            });\n          }\n\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef,\n            context,\n          }), resultName);\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context,\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.lookupFragment,\n        );\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw new InvariantError(`No fragment named ${selection.name.value}`);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = context.canonizeResults\n      ? this.canon.admit(finalResult)\n      // Since this.canon is normally responsible for freezing results (only in\n      // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context,\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}