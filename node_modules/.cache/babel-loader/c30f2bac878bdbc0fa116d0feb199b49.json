{"ast":null,"code":"import { InvariantError } from \"../../utilities/globals/index.js\";\nexport var serializeFetchParameter = function (p, label) {\n  var serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = __DEV__ ? new InvariantError(\"Network request failed. \".concat(label, \" is not serializable: \").concat(e.message)) : new InvariantError(24);\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};","map":{"version":3,"sources":["../../../src/link/http/serializeFetchParameter.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,kCAA0B;AAMzD,OAAO,IAAM,uBAAuB,GAAG,SAAA,CAAC,CAAM,EAAE,KAAa,EAAA;EAC3D,IAAI,UAAU;EACd,IAAI;IACF,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;GAC/B,CAAC,OAAO,CAAC,EAAE;IACV,IAAM,UAAU,GAAG,OAAI,GAAA,IAAA,cACrB,CAAA,0BAA2B,CAAA,MAAK,CAAA,KAAA,EAAA,wBAA0B,CAAC,CAAA,MAAO,CAAE,CACjD,CAAC,OAAA,CAAA,CAAA,GAAA,IAAA,cAAA,CAAA,EAAA,CAAA;IACtB,UAAU,CAAC,UAAU,GAAG,CAAC;IACzB,MAAM,UAAU;EACjB;EACD,OAAO,UAAU;AACnB,CAAC","sourcesContent":["import { InvariantError } from '../../utilities/globals';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}