{"ast":null,"code":"import * as React from 'react';\nimport { canUseSymbol } from \"../../utilities/index.js\";\nvar contextKey = canUseSymbol ? Symbol.for('__APOLLO_CONTEXT__') : '__APOLLO_CONTEXT__';\nexport function getApolloContext() {\n  var context = React.createContext[contextKey];\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext({}),\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\nexport { getApolloContext as resetApolloContext };","map":{"version":3,"sources":["../../../src/react/context/ApolloContext.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAE9B,SAAS,YAAY,QAAQ,0BAAkB;AAY/C,IAAM,UAAU,GAAG,YAAY,GAC3B,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAChC,oBAAoB;AAExB,OAAM,SAAU,gBAAgB,CAAA,EAAA;EAC9B,IAAI,OAAO,GAAI,KAAK,CAAC,aAAqB,CAAC,UAAU,CAAsC;EAC3F,IAAI,CAAC,OAAO,EAAE;IACZ,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,EAAE,UAAU,EAAE;MACrD,KAAK,EAAE,OAAO,GAAG,KAAK,CAAC,aAAa,CAAqB,CAAA,CAAE,CAAC;MAC5D,UAAU,EAAE,KAAK;MACjB,QAAQ,EAAE,KAAK;MACf,YAAY,EAAE;KACf,CAAC;IACF,OAAO,CAAC,WAAW,GAAG,eAAe;EACtC;EACD,OAAO,OAAO;AAChB;AAEA,SAAS,gBAAgB,IAAI,kBAAkB","sourcesContent":["import * as React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseSymbol } from '../../utilities';\nimport type { RenderPromises } from '../ssr';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey = canUseSymbol\n  ? Symbol.for('__APOLLO_CONTEXT__')\n  : '__APOLLO_CONTEXT__';\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  let context = (React.createContext as any)[contextKey] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext<ApolloContextValue>({}),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = 'ApolloContext';\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}