{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () {\n  return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n      if (id) {\n        var ref = makeReference(id);\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n        return ref;\n      }\n    };\n  }\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n    return false;\n  };\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  };\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n    return obj;\n  };\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n    if (newData) {\n      var __META = newData.__META,\n        rest_1 = __rest(newData, [\"__META\"]);\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  };\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  };\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      var root_1 = this;\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n    return idsToRemove;\n  };\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  };\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n  return EntityStore;\n}();\nexport { EntityStore };\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n  return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n    function Root(_a) {\n      var policies = _a.policies,\n        _b = _a.resultCaching,\n        resultCaching = _b === void 0 ? true : _b,\n        seed = _a.seed;\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n    return Root;\n  }(EntityStore);\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n    var parent = this.parent.removeLayer(layerId);\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n      return parent;\n    }\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n    while (p.parent) p = p.parent;\n    return p.getStorage.apply(p, arguments);\n  };\n  return Layer;\n}(EntityStore);\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n  return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/entityStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { dep, OptimisticDependencyFunction } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(\n    older: string | StoreObject,\n    newer: StoreObject | string,\n  ): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\"\n        ? this.lookup(dataId = older)\n        : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\"\n        ? this.lookup(dataId = newer)\n        : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(\n      typeof dataId === \"string\",\n      \"store.merge expects a string ID\",\n    );\n\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty.__typename &&\n            !(existing && existing.__typename) &&\n            // Since we return default root __typename strings\n            // automatically from store.get, we don't need to dirty the\n            // ROOT_QUERY.__typename field if merged.__typename is equal\n            // to the default string (usually \"Query\").\n            this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId as string, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(\n    options: Cache.EvictOptions,\n    limit: EntityStore,\n  ): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null,\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\",\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string,\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName],\n                         parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group),\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge() {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge.apply(this.parent, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}