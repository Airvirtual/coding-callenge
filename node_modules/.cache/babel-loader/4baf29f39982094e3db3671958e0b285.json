{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a;\n  var abortControllersRef = useRef(new Set());\n  var execOptionsRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var internalState = useInternalState(useApolloClient(options && options.client), (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function (key) {\n      var method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  useEffect(function () {\n    return function () {\n      abortControllersRef.current.forEach(function (controller) {\n        controller.abort();\n      });\n    };\n  }, []);\n  var execute = useCallback(function (executeOptions) {\n    var controller = new AbortController();\n    abortControllersRef.current.add(controller);\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var promise = internalState.asyncUpdate(controller.signal).then(function (queryResult) {\n      abortControllersRef.current.delete(controller);\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {\n      abortControllersRef.current.delete(controller);\n    });\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":"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","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { OperationVariables } from '../../core';\nimport { mergeOptions } from '../../utilities';\nimport {\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  QueryResult,\n} from '../types/types';\nimport { useInternalState } from './useQuery';\nimport { useApolloClient } from './useApolloClient';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'reobserve',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables extends OperationVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): LazyQueryResultTuple<TData, TVariables> {\n  const abortControllersRef = useRef(new Set<AbortController>());\n\n  const execOptionsRef = useRef<Partial<LazyQueryHookOptions<TData, TVariables>>>();\n  const merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    merged?.query ?? query\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> =\n    Object.assign(useQueryResult, {\n      called: !!execOptionsRef.current,\n    });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  useEffect(() => {\n    return () => {\n      abortControllersRef.current.forEach((controller) => {\n        controller.abort();\n      });\n    }\n  }, [])\n\n  const execute = useCallback<\n    LazyQueryResultTuple<TData, TVariables>[0]\n  >(executeOptions => {\n    const controller = new AbortController();\n    abortControllersRef.current.add(controller);\n\n    execOptionsRef.current = executeOptions ? {\n      ...executeOptions,\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n    } : {\n      fetchPolicy: initialFetchPolicy,\n    };\n\n    const promise = internalState\n      .asyncUpdate(controller.signal) // Like internalState.forceUpdate, but returns a Promise.\n      .then(queryResult => {\n        abortControllersRef.current.delete(controller);\n\n        return Object.assign(queryResult, eagerMethods);\n      });\n\n    promise.catch(() => {\n      abortControllersRef.current.delete(controller);\n    });\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}