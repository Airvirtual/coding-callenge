{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport function toPromise(observable) {\n  var completed = false;\n  return new Promise(function (resolve, reject) {\n    observable.subscribe({\n      next: function (data) {\n        if (completed) {\n          __DEV__ && invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/link/utils/toPromise.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,kCAA0B;AAGpD,OAAM,SAAU,SAAS,CAAI,UAAyB,EAAA;EACpD,IAAI,SAAS,GAAG,KAAK;EACrB,OAAO,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM,EAAA;IACpC,UAAU,CAAC,SAAS,CAAC;MACnB,IAAI,EAAE,SAAA,CAAA,IAAI,EAAA;QACR,IAAI,SAAS,EAAE;UACb,OAAA,IAAU,SACR,CAAA,IAAA,CAAA,mEACA,CAAA;SACH,MAAM;UACL,SAAS,GAAG,IAAI;UAChB,OAAO,CAAC,IAAI,CAAC;QACd;MACH,CAAC;MACD,KAAK,EAAE;KACR,CAAC;EACJ,CAAC,CAAC;AACJ","sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { Observable } from '../../utilities';\n\nexport function toPromise<R>(observable: Observable<R>): Promise<R> {\n  let completed = false;\n  return new Promise<R>((resolve, reject) => {\n    observable.subscribe({\n      next: data => {\n        if (completed) {\n          invariant.warn(\n            `Promise Wrapper does not support multiple results from Observable`,\n          );\n        } else {\n          completed = true;\n          resolve(data);\n        }\n      },\n      error: reject,\n    });\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}