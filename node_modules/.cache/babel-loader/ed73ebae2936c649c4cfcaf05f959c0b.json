{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment_experimental(options) {\n  var cache = useApolloClient().cache;\n  var fragment = options.fragment,\n    fragmentName = options.fragmentName,\n    from = options.from,\n    _a = options.optimistic,\n    optimistic = _a === void 0 ? true : _a,\n    rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n  var diffOptions = __assign(__assign({}, rest), {\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n  var resultRef = useRef();\n  var latestDiff = cache.diff(diffOptions);\n  var getSnapshot = function () {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  };\n  return useSyncExternalStore(function (forceUpdate) {\n    return cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          forceUpdate();\n        }\n      }\n    }));\n  }, getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useFragment.ts"],"names":[],"mappings":";AAAA,SAAS,MAAM,QAAQ,OAAO;AAC9B,SAAS,KAAK,QAAQ,eAAe;AAErC,SAAS,cAAc,QAAQ,0BAAkB;AAQjD,SAAS,eAAe,QAAQ,sBAAoB;AACpD,SAAS,oBAAoB,QAAQ,2BAAyB;AAuC9D,OAAM,SAAU,wBAAwB,CAItC,OAAyC,EAAA;EAEjC,IAAA,KAAK,GAAK,eAAe,EAAE,CAAA,KAAtB;EAGX,IAAA,QAAQ,GAKN,OAAO,CAAA,QALD;IACR,YAAY,GAIV,OAAO,CAAA,YAJG;IACZ,IAAI,GAGF,OAAO,CAAA,IAHL;IACJ,EAAA,GAEE,OAAO,CAAA,UAFQ;IAAjB,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAA,EAAA;IACd,IAAI,GAAA,MAAA,CACL,OAAO,EANL,CAAA,UAAA,EAAA,cAAA,EAAA,MAAA,EAAA,YAAA,CAML,CADQ;EAGT,IAAM,WAAW,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACZ,IAAI,CAAA,EAAA;IACP,EAAE,EAAE,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC1D,KAAK,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,YAAY,CAAC;IACtD,UAAU,EAAA;EAAA,CAAA,CACX;EAED,IAAM,SAAS,GAAG,MAAM,EAA4B;EACpD,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAQ,WAAW,CAAC;EAG/C,IAAM,WAAW,GAAG,SAAA,CAAA,EAAA;IAClB,IAAM,kBAAkB,GAAG,YAAY,CAAC,UAAU,CAAC;IACnD,OAAO,SAAS,CAAC,OAAO,IACtB,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC,GACpD,SAAS,CAAC,OAAO,GAChB,SAAS,CAAC,OAAO,GAAG,kBAAmB;EAC9C,CAAC;EAED,OAAO,oBAAoB,CACzB,UAAC,WAAW,EAAA;IACV,OAAO,KAAK,CAAC,KAAK,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACb,WAAW,CAAA,EAAA;MACd,SAAS,EAAE,IAAI;MACf,QAAQ,EAAA,SAAA,CAAC,IAAI,EAAA;QACX,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE;UAC5B,SAAS,CAAC,OAAO,GAAG,YAAY,CAAE,UAAU,GAAG,IAAI,CAAE;UACrD,WAAW,EAAE;QACd;MACH;IAAC,CAAA,CAAA,CACD;EACJ,CAAC,EACD,WAAW,EACX,WAAW,CACZ;AACH;AAEA,SAAS,YAAY,CACnB,IAA6B,EAAA;EAE7B,IAAM,MAAM,GAA6B;IACvC,IAAI,EAAE,IAAI,CAAC,MAAM;IACjB,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;GAClB;EAED,IAAI,IAAI,CAAC,OAAO,EAAE;IAChB,MAAM,CAAC,OAAO,GAAG,cAAc,CAC7B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,EAAA;MAAI,OAAA,KAAK,CAAC,OAAO;IAAb,CAAa,CAAC,CACzC;EACF;EAED,OAAO,MAAM;AACf","sourcesContent":["import { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport { mergeDeepArray } from \"../../utilities\";\nimport {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache\";\n\nimport { useApolloClient } from \"./useApolloClient\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore\";\nimport { OperationVariables } from \"../../core\";\n\nexport interface UseFragmentOptions<TData, TVars>\nextends Omit<\n  Cache.DiffOptions<TData, TVars>,\n  | \"id\"\n  | \"query\"\n  | \"optimistic\"\n  | \"previousResult\"\n>, Omit<\n  Cache.ReadFragmentOptions<TData, TVars>,\n  | \"id\"\n> {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\n// Since the above definition of UseFragmentOptions can be hard to parse without\n// help from TypeScript/VSCode, here are the intended fields and their types.\n// Uncomment this code to check that it's consistent with the definition above.\n//\n// export interface UseFragmentOptions<TData, TVars> {\n//   from: string | StoreObject | Reference;\n//   fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n//   fragmentName?: string;\n//   optimistic?: boolean;\n//   variables?: TVars;\n//   returnPartialData?: boolean;\n//   canonizeResults?: boolean;\n// }\n\nexport interface UseFragmentResult<TData> {\n  data: TData | undefined;\n  complete: boolean;\n  missing?: MissingTree;\n}\n\nexport function useFragment_experimental<\n  TData = any,\n  TVars = OperationVariables\n>(\n  options: UseFragmentOptions<TData, TVars>,\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const {\n    fragment,\n    fragmentName,\n    from,\n    optimistic = true,\n    ...rest\n  } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = () => {\n    const latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current &&\n      equal(resultRef.current.data, latestDiffToResult.data)\n      ? resultRef.current\n      : (resultRef.current = latestDiffToResult);\n  };\n\n  return useSyncExternalStore(\n    (forceUpdate) => {\n      return cache.watch({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (!equal(diff, latestDiff)) {\n            resultRef.current = diffToResult((latestDiff = diff));\n            forceUpdate();\n          }\n        },\n      });\n    },\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>,\n): UseFragmentResult<TData> {\n  const result: UseFragmentResult<TData> = {\n    data: diff.result,\n    complete: !!diff.complete,\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(\n      diff.missing.map(error => error.missing),\n    );\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}